<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunlanchang.github.io/"/>
  <updated>2017-10-26T00:27:42.215Z</updated>
  <id>http://sunlanchang.github.io/</id>
  
  <author>
    <name>Jason Sun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用jieba和wordcloud生成词云</title>
    <link href="http://sunlanchang.github.io/2017/10/26/%E5%88%A9%E7%94%A8jieba%E5%92%8Cwordcloud%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/"/>
    <id>http://sunlanchang.github.io/2017/10/26/利用jieba和wordcloud生成词云/</id>
    <published>2017-10-26T00:20:44.000Z</published>
    <updated>2017-10-26T00:27:42.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用wordcloud和jieba做一个词云"><a href="#利用wordcloud和jieba做一个词云" class="headerlink" title="利用wordcloud和jieba做一个词云"></a>利用<code>wordcloud</code>和<code>jieba</code>做一个词云</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>使用到的轮子：<code>matplotlib</code>，<code>jieba</code>，<code>scipy</code>，<code>wordcloud</code>，<code>numpy</code>，<code>PIL</code>。<br><code>python2</code>对<code>jieba</code>的中文分词支持不是很好，所以使用<code>python3</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">python <span class="number">3.6</span><span class="number">.1</span></div><div class="line">jieba <span class="number">0.39</span></div><div class="line">matplotlib <span class="number">1.0</span><span class="number">.4</span></div><div class="line">scipy <span class="number">1.0</span><span class="number">.0</span></div><div class="line">wordcloud <span class="number">1.3</span><span class="number">.1</span></div><div class="line">numpy <span class="number">1.13</span><span class="number">.3</span></div><div class="line">PIL <span class="number">1.1</span><span class="number">.6</span></div></pre></td></tr></table></figure></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="导入轮子"><a href="#导入轮子" class="headerlink" title="导入轮子"></a>导入轮子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#encoding=utf-8</span></div><div class="line"><span class="keyword">import</span> jieba</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</div><div class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, STOPWORDS, ImageColorGenerator</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div></pre></td></tr></table></figure><p>所用到的库都能用<code>pip3</code>安装。</p><h3 id="生成分词"><a href="#生成分词" class="headerlink" title="生成分词"></a>生成分词</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">text_from_file=open(<span class="string">'data.txt'</span>,<span class="string">'r'</span>).read()</div><div class="line">Word_spilt_jieba = jieba.cut(text_from_file,cut_all = <span class="keyword">False</span>)</div><div class="line">word_space = <span class="string">' '</span>.join(Word_spilt_jieba)</div></pre></td></tr></table></figure><p>数据是从网上复制了几份十九大，国庆，小说的内容，从文本中读入数据到<code>text</code>，用<code>jieba</code>进行分词，不使用全模式，全模式匹配会出现重复关键词的现象，使用后效果并不好。</p><h3 id="自定义词云背景"><a href="#自定义词云背景" class="headerlink" title="自定义词云背景"></a>自定义词云背景</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">img=imread(<span class="string">'bipt.jpg'</span>)</div><div class="line">img = np.array(Image.open(<span class="string">'bipt.jpg'</span>))</div></pre></td></tr></table></figure><p>设置生成词云的背景，这里用到了numpy将图片转换为矩阵，图片需要自己下载定义背景。</p><h3 id="生成词云"><a href="#生成词云" class="headerlink" title="生成词云"></a>生成词云</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">my_wordcloud = WordCloud(</div><div class="line">    background_color=<span class="string">'white'</span>, <span class="comment">#设置背景颜色</span></div><div class="line">    mask=img,  <span class="comment">#背景图片</span></div><div class="line">    max_words = <span class="number">200</span>, <span class="comment">#设置最大显示的词数</span></div><div class="line">    stopwords = STOPWORDS, <span class="comment">#设置停用词</span></div><div class="line">    <span class="comment">#设置字体格式，字体格式 .ttf文件需自己网上下载，最好将名字改为英文，中文名路径加载会出现问题。</span></div><div class="line">    font_path = <span class="string">'simkai.ttf'</span>, </div><div class="line">    max_font_size = <span class="number">100</span>, <span class="comment">#设置字体最大值</span></div><div class="line">    random_state=<span class="number">50</span>, <span class="comment">#设置随机生成状态，即多少种配色方案</span></div><div class="line">    ).generate(word_space)</div></pre></td></tr></table></figure><p>设置<code>wordcloud</code>参数，注意这里有一个字体必须自己设置中文字体，否则生成的词云不能出现中文，我用到的是<code>simkai.ttf</code>，下载地址：<a href="https://www.biptedu.cn/download/simkai.ttf" target="_blank" rel="external">simkai字体</a>。</p><h3 id="显示词云"><a href="#显示词云" class="headerlink" title="显示词云"></a>显示词云</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">iamge_colors = ImageColorGenerator(img)</div><div class="line">plt.imshow(my_wordcloud)</div><div class="line">plt.axis(<span class="string">'off'</span>)</div><div class="line">plt.show()</div><div class="line">my_wordcloud.to_file(<span class="string">'res.jpg'</span>)</div></pre></td></tr></table></figure><p>取图片的颜色作为词云的颜色，并显示词云。如下图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/ciyun.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;利用wordcloud和jieba做一个词云&quot;&gt;&lt;a href=&quot;#利用wordcloud和jieba做一个词云&quot; class=&quot;headerlink&quot; title=&quot;利用wordcloud和jieba做一个词云&quot;&gt;&lt;/a&gt;利用&lt;code&gt;wordcloud&lt;/c
      
    
    </summary>
    
    
      <category term="小程序" scheme="http://sunlanchang.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>爬取QQ空间数据进行分析</title>
    <link href="http://sunlanchang.github.io/2017/10/24/%E7%88%AC%E5%8F%96QQ%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90/"/>
    <id>http://sunlanchang.github.io/2017/10/24/爬取QQ空间数据进行分析/</id>
    <published>2017-10-24T00:45:21.000Z</published>
    <updated>2017-10-25T07:48:33.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要思路："><a href="#主要思路：" class="headerlink" title="主要思路："></a>主要思路：</h1><ol><li>通过<code>selenium+phantomjs</code>模拟登录<code>qq</code>空间取到<code>cookies</code>和<code>g_qzonetoken</code>，并算出<code>gtk</code></li><li>通过<code>Requests</code>库利用前面得到的<code>url</code>参数，构造<code>http</code>请求</li><li>分析请求得到的响应，是一个<code>json</code>，利用正则表达式提取字段</li><li>设计数据表，并将提取到的字段插入到数据库中 </li><li>通过<code>qq</code>邮箱中的导出联系人功能，把好友的<code>qq</code>号导出到一个csv文件，遍历所有的<code>qq</code>号爬取所有的说说</li><li>通过<code>sql</code>查询和<code>ipython</code>分析数据，并将数据可视化</li><li>通过<code>python</code>的第三方库<code>jieba</code>、<code>wordcloud</code>基于说说的内容做一个词云</li><li>通过<code>selenium+phantomjs</code>模拟登录<code>qq</code>空间取到<code>cookies</code>和<code>g_qzonetoken</code>，并算出<code>gtk</code><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line"><span class="comment">#定义登录函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">QR_login</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getGTK</span><span class="params">(cookie)</span>:</span></div><div class="line">        <span class="string">""" 根据cookie得到GTK """</span></div><div class="line">        hashes = <span class="number">5381</span></div><div class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> cookie[<span class="string">'p_skey'</span>]:</div><div class="line">            hashes += (hashes &lt;&lt; <span class="number">5</span>) + ord(letter)</div><div class="line"></div><div class="line"><span class="keyword">return</span> hashes &amp; <span class="number">0x7fffffff</span></div><div class="line">    browser=webdriver.PhantomJS(executable_path=<span class="string">"D:\phantomjs.exe"</span>)<span class="comment">#这里要输入你的phantomjs所在的路径</span></div><div class="line">    url=<span class="string">"https://qzone.qq.com/"</span><span class="comment">#QQ登录网址</span></div><div class="line">    browser.get(url)</div><div class="line">    browser.maximize_window()<span class="comment">#全屏</span></div><div class="line">    sleep(<span class="number">3</span>)<span class="comment">#等三秒</span></div><div class="line">    browser.get_screenshot_as_file(<span class="string">'QR.png'</span>)<span class="comment">#截屏并保存图片</span></div><div class="line">    im = Image.open(<span class="string">'QR.png'</span>)<span class="comment">#打开图片</span></div><div class="line">    im.show()<span class="comment">#用手机扫二维码登录qq空间</span></div><div class="line">    sleep(<span class="number">20</span>)<span class="comment">#等二十秒，可根据自己的网速和性能修改</span></div><div class="line">    print(browser.title)<span class="comment">#打印网页标题</span></div><div class="line">    cookie = &#123;&#125;<span class="comment">#初始化cookie字典</span></div><div class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> browser.get_cookies():<span class="comment">#取cookies</span></div><div class="line">        cookie[elem[<span class="string">'name'</span>]] = elem[<span class="string">'value'</span>]</div><div class="line">print(<span class="string">'Get the cookie of QQlogin successfully!(共%d个键值对)'</span> % (len(cookie)))</div><div class="line">    html = browser.page_source<span class="comment">#保存网页源码</span></div><div class="line">    g_qzonetoken=re.search(<span class="string">r'window\.g_qzonetoken = \(function\(\)\&#123; try\&#123;return (.*?);\&#125; catch\(e\)'</span>,html)<span class="comment">#从网页源码中提取g_qzonetoken</span></div><div class="line">    gtk=getGTK(cookie)<span class="comment">#通过getGTK函数计算gtk</span></div><div class="line">    browser.quit()</div><div class="line"><span class="keyword">return</span> (cookie,gtk,g_qzonetoken.group(<span class="number">1</span>))</div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    QR_login()</div></pre></td></tr></table></figure></li></ol><p>通过火狐浏览器的一个叫<code>json-dataview</code>的插件可以看到这个响应是一个<code>json</code>格式的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_mood</span><span class="params">(i)</span>:</span></div><div class="line">    <span class="string">'''从返回的json中，提取我们想要的字段'''</span></div><div class="line">    text = re.sub(<span class="string">'"commentlist":.*?"conlist":'</span>, <span class="string">''</span>, i)</div><div class="line"><span class="keyword">if</span> text:</div><div class="line">        myMood = &#123;&#125;</div><div class="line">        myMood[<span class="string">"isTransfered"</span>] = <span class="keyword">False</span></div><div class="line">        tid = re.findall(<span class="string">'"t1_termtype":.*?"tid":"(.*?)"'</span>, text)[<span class="number">0</span>]  <span class="comment"># 获取说说ID</span></div><div class="line">        tid = qq + <span class="string">'_'</span> + tid</div><div class="line">        myMood[<span class="string">'id'</span>] = tid</div><div class="line">        myMood[<span class="string">'pos_y'</span>] = <span class="number">0</span></div><div class="line">        myMood[<span class="string">'pos_x'</span>] = <span class="number">0</span></div><div class="line">        mood_cont = re.findall(<span class="string">'\],"content":"(.*?)"'</span>, text)</div><div class="line"><span class="keyword">if</span> re.findall(<span class="string">'&#125;,"name":"(.*?)",'</span>, text):</div><div class="line">            name = re.findall(<span class="string">'&#125;,"name":"(.*?)",'</span>, text)[<span class="number">0</span>]</div><div class="line">            myMood[<span class="string">'name'</span>] = name</div><div class="line"><span class="keyword">if</span> len(mood_cont) == <span class="number">2</span>:  <span class="comment"># 如果长度为2则判断为属于转载</span></div><div class="line">            myMood[<span class="string">"Mood_cont"</span>] = <span class="string">"评语:"</span> + mood_cont[<span class="number">0</span>] + <span class="string">"---------&gt;转载内容:"</span> + mood_cont[<span class="number">1</span>]  <span class="comment"># 说说内容</span></div><div class="line">            myMood[<span class="string">"isTransfered"</span>] = <span class="keyword">True</span></div><div class="line">        <span class="keyword">elif</span> len(mood_cont) == <span class="number">1</span>:</div><div class="line">            myMood[<span class="string">"Mood_cont"</span>] = mood_cont[<span class="number">0</span>]</div><div class="line"><span class="keyword">else</span>:</div><div class="line">            myMood[<span class="string">"Mood_cont"</span>] = <span class="string">""</span></div><div class="line">        <span class="keyword">if</span> re.findall(<span class="string">'"created_time":(\d+)'</span>, text):</div><div class="line">            created_time = re.findall(<span class="string">'"created_time":(\d+)'</span>, text)[<span class="number">0</span>]</div><div class="line">            temp_pubTime = datetime.datetime.fromtimestamp(int(created_time))</div><div class="line">            temp_pubTime = temp_pubTime.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div><div class="line">            dt = temp_pubTime.split(<span class="string">' '</span>)</div><div class="line">            time = dt[<span class="number">1</span>]</div><div class="line">            myMood[<span class="string">'time'</span>] = time</div><div class="line">            date = dt[<span class="number">0</span>]</div><div class="line">            myMood[<span class="string">'date'</span>] = date</div><div class="line"><span class="keyword">if</span> re.findall(<span class="string">'"source_name":"(.*?)"'</span>, text):</div><div class="line">            source_name = re.findall(<span class="string">'"source_name":"(.*?)"'</span>, text)[<span class="number">0</span>]  <span class="comment"># 获取发表的工具（如某手机）</span></div><div class="line">            myMood[<span class="string">'tool'</span>] = source_name</div><div class="line"><span class="keyword">if</span> re.findall(<span class="string">'"pos_x":"(.*?)"'</span>, text):<span class="comment">#获取经纬度坐标</span></div><div class="line">            pos_x = re.findall(<span class="string">'"pos_x":"(.*?)"'</span>, text)[<span class="number">0</span>]</div><div class="line">            pos_y = re.findall(<span class="string">'"pos_y":"(.*?)"'</span>, text)[<span class="number">0</span>]</div><div class="line"><span class="keyword">if</span> pos_x:</div><div class="line">                myMood[<span class="string">'pos_x'</span>] = pos_x</div><div class="line"><span class="keyword">if</span> pos_y:</div><div class="line">                myMood[<span class="string">'pos_y'</span>] = pos_y</div><div class="line">            idname = re.findall(<span class="string">'"idname":"(.*?)"'</span>, text)[<span class="number">0</span>]</div><div class="line">            myMood[<span class="string">'idneme'</span>] = idname</div><div class="line">            cmtnum = re.findall(<span class="string">'"cmtnum":(.*?),'</span>, text)[<span class="number">0</span>]</div><div class="line">            myMood[<span class="string">'cmtnum'</span>] = cmtnum</div><div class="line"><span class="keyword">return</span> myMood<span class="comment">#返回一个字典</span></div></pre></td></tr></table></figure></p><p>我们想要的东西已经提取出来了，接下来需要设计数据表，通过<code>navicat</code>可以很方便的建表，然后通过<code>python</code>连接<code>mysql</code>数据库，写入数据。这是创建数据表的<code>sql</code>代码<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mood`</span> (</div><div class="line"><span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">80</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`content`</span> <span class="built_in">text</span>,</div><div class="line"><span class="string">`comments_num`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`time`</span> <span class="keyword">time</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`tool`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`sitename`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`pox_x`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`pox_y`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`isTransfered`</span> <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure></p><p>其实到这里爬虫的主要的代码就算完了，之后主要是通过QQ邮箱的联系人导出功能，构建<code>url</code>列表，最后等着它运行完成就可以了。这里我单线程爬200多个好友用了大约三个小时，拿到了十万条说说。下面是爬虫的主体代码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#从csv文件中取qq号，并保存在一个列表中</span></div><div class="line">csv_reader = csv.reader(open(<span class="string">'qq.csv'</span>))</div><div class="line">friend=[]</div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> csv_reader:</div><div class="line">    friend.append(row[<span class="number">3</span>])</div><div class="line">friend.pop(<span class="number">0</span>)</div><div class="line">friends=[]</div><div class="line"><span class="keyword">for</span> f <span class="keyword">in</span> friend:</div><div class="line">    f=f[:<span class="number">-7</span>]</div><div class="line">    friends.append(f)</div><div class="line">headers=&#123;</div><div class="line"><span class="string">'Host'</span>: <span class="string">'h5.qzone.qq.com'</span>,</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0'</span>,</div><div class="line">    <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</div><div class="line">    <span class="string">'Accept-Language'</span>:<span class="string">'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3'</span>,</div><div class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</div><div class="line">    <span class="string">'Referer'</span>: <span class="string">'https://user.qzone.qq.com/790178228?_t_=0.22746974226377736'</span>,</div><div class="line">    <span class="string">'Connection'</span>:<span class="string">'keep-alive'</span></div><div class="line">&#125;<span class="comment">#伪造浏览器头</span></div><div class="line">conn = MySQLdb.connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, <span class="string">'qq_mood'</span>, charset=<span class="string">"utf8"</span>, use_unicode=<span class="keyword">True</span>)<span class="comment">#连接mysql数据库</span></div><div class="line">cursor = conn.cursor()<span class="comment">#定义游标</span></div><div class="line">cookie,gtk,qzonetoken=QRlogin<span class="comment">#通过登录函数取得cookies，gtk，qzonetoken</span></div><div class="line">s=requests.session()<span class="comment">#用requests初始化会话</span></div><div class="line"><span class="keyword">for</span> qq <span class="keyword">in</span> friends:<span class="comment">#遍历qq号列表</span></div><div class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">1000</span>):</div><div class="line">        pos=p*<span class="number">20</span></div><div class="line">        params=&#123;</div><div class="line"><span class="string">'uin'</span>:qq,</div><div class="line">        <span class="string">'ftype'</span>:<span class="string">'0'</span>,</div><div class="line">        <span class="string">'sort'</span>:<span class="string">'0'</span>,</div><div class="line">        <span class="string">'pos'</span>:pos,</div><div class="line">        <span class="string">'num'</span>:<span class="string">'20'</span>,</div><div class="line">        <span class="string">'replynum'</span>:<span class="string">'100'</span>,</div><div class="line">        <span class="string">'g_tk'</span>:gtk,</div><div class="line">        <span class="string">'callback'</span>:<span class="string">'_preloadCallback'</span>,</div><div class="line">        <span class="string">'code_version'</span>:<span class="string">'1'</span>,</div><div class="line">        <span class="string">'format'</span>:<span class="string">'jsonp'</span>,</div><div class="line">        <span class="string">'need_private_comment'</span>:<span class="string">'1'</span>,</div><div class="line">        <span class="string">'qzonetoken'</span>:qzonetoken</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        response=s.request(<span class="string">'GET'</span>,<span class="string">'https://h5.qzone.qq.com/proxy/domain/taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6'</span>,params=params,headers=headers,cookies=cookie)</div><div class="line">print(response.status_code)<span class="comment">#通过打印状态码判断是否请求成功</span></div><div class="line">        text=response.text<span class="comment">#读取响应内容</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">'lbs'</span>, text):<span class="comment">#通过lbs判断此qq的说说是否爬取完毕</span></div><div class="line">            print(<span class="string">'%s说说下载完成'</span>% qq)</div><div class="line"><span class="keyword">break</span></div><div class="line">        textlist = re.split(<span class="string">'\&#123;"certified"'</span>, text)[<span class="number">1</span>:]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> textlist:</div><div class="line">            myMood=parse_mood(i)</div><div class="line"><span class="string">'''将提取的字段值插入mysql数据库，通过用异常处理防止个别的小bug中断爬虫，开始的时候可以先不用异常处理判断是否能正常插入数据库'''</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                insert_sql = <span class="string">'''</span></div><div class="line"><span class="string">                           insert into mood(id,content,time,sitename,pox_x,pox_y,tool,comments_num,date,isTransfered,name)</span></div><div class="line"><span class="string">                           VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)</span></div><div class="line"><span class="string">                        '''</span></div><div class="line">                cursor.execute(insert_sql, (myMood[<span class="string">'id'</span>],myMood[<span class="string">"Mood_cont"</span>],myMood[<span class="string">'time'</span>],myMood[<span class="string">'idneme'</span>],myMood[<span class="string">'pos_x'</span>],myMood[<span class="string">'pos_y'</span>],myMood[<span class="string">'tool'</span>],myMood[<span class="string">'cmtnum'</span>],myMood[<span class="string">'date'</span>],myMood[<span class="string">"isTransfered"</span>],myMood[<span class="string">'name'</span>]))</div><div class="line">                conn.commit()</div><div class="line"><span class="keyword">except</span>:</div><div class="line">                <span class="keyword">pass</span></div><div class="line">print(<span class="string">'说说全部下载完成！'</span>)</div></pre></td></tr></table></figure></p><h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><h2 id="学生QQ用的多还是微信用的多？"><a href="#学生QQ用的多还是微信用的多？" class="headerlink" title="学生QQ用的多还是微信用的多？"></a>学生QQ用的多还是微信用的多？</h2><ol><li>先用<code>sql</code>进行聚合分析，然后通过<code>ipython</code>作图，将数据可视化。<br>统计一年之中每天的说说数目，可以发现每年除夕这一天是大家发说说最多的一天,可以看出2015年9月达到了一个高峰，主要因为数据是2015级的，所以在2015年九月大学入学的，之后开始下降，好多人开始玩微信，逐渐放弃了QQ，所以北石化学生用微信还是多。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/qq1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>通过下面这个年变化图可以更直观的看出QQ使用的频率越来越少，可能因为大学里班级，社团，活动有很多的微信群，越来越少的北石化学生使用QQ。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/qq2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>   <h2 id="学生晚上几点睡觉？"><a href="#学生晚上几点睡觉？" class="headerlink" title="学生晚上几点睡觉？"></a>学生晚上几点睡觉？</h2>通过这个每小时段说说发表的数目柱形图，可以发现大家在晚上22点到23点左右是最多的，另外中午十二点到一点也有一个小高峰!由此可见大多数学生在宿舍十一点熄灯后，并不会按时睡觉。<br><img src="/images/qq3.png" alt="">  <h2 id="学生的经济情况怎么样？"><a href="#学生的经济情况怎么样？" class="headerlink" title="学生的经济情况怎么样？"></a>学生的经济情况怎么样？</h2>用Excel的内容筛选功能，做了一个手机类型的饼图,通过这个饼图可以看出使用最多的手机是苹果，小米，魅族，华为这四个手机品牌,说明大多数大学生还是比较倾向于性价比比较高的手机，从某一方面可以体现大多数同学还是中等生活水平。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/qq4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="学生都在说些什么？"><a href="#学生都在说些什么？" class="headerlink" title="学生都在说些什么？"></a>学生都在说些什么？</h2>通过将<code>mood</code>表中的<code>content</code>字段导出为txt文本文件，利用<code>python</code>的<code>jieba</code>和<code>wordcloud</code>这两个第三方库，可以生成基于说说内容的词云.看看大家在国庆期间都再说些什么，很明显关于，习近平主席，国庆节，人民英雄纪念碑等关键词明显增多，同样也有计算机，英语，考试等关于学习的字段。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/qq5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;主要思路：&quot;&gt;&lt;a href=&quot;#主要思路：&quot; class=&quot;headerlink&quot; title=&quot;主要思路：&quot;&gt;&lt;/a&gt;主要思路：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;selenium+phantomjs&lt;/code&gt;模拟登录&lt;code&gt;qq&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="小程序" scheme="http://sunlanchang.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python写一个简单的神经网络</title>
    <link href="http://sunlanchang.github.io/2017/10/21/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    <id>http://sunlanchang.github.io/2017/10/21/测试文档/</id>
    <published>2017-10-20T16:43:50.000Z</published>
    <updated>2017-10-22T11:31:44.440Z</updated>
    
    <content type="html"><![CDATA[<p>简单的神经网络算法，包括基本的后向传播<code>BP</code>算法，前向传播算法，更新权重使用的梯度下降算法，基本的框架算是有了，学习使用。<br>注意输入每一行数据时候在神经网络中会加入<code>bias</code>偏量，神经网络的层数和每层个数为自定义，搞了很久才知道输入矩阵多了一个维度，权重和后向传播更新的delta都是每列神经元之间的关系，关于s形函数暂时用了两种，分别是<code>logistic()</code> 和 <code>tanh()</code> 效果差不多，简单的模型作为笔记学习使用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> np.tanh(x)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh_deriv</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="number">1.0</span> - np.tanh(x) * np.tanh(x)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logistic</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logistic_derivative</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> logistic(x) * (<span class="number">1</span> - logistic(x))</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, layers, activation=<span class="string">'tanh'</span>)</span>:</span></div><div class="line">        <span class="keyword">if</span> activation == <span class="string">'logistic'</span>:</div><div class="line">            self.activation = logistic</div><div class="line">            self.activation_deriv = logistic_derivative</div><div class="line">        <span class="keyword">elif</span> activation == <span class="string">'tanh'</span>:</div><div class="line">            self.activation = tanh</div><div class="line">            self.activation_deriv = tanh_deriv</div><div class="line"></div><div class="line">        self.weights = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(layers) - <span class="number">1</span>):</div><div class="line">            self.weights.append(</div><div class="line">                (<span class="number">2</span> * np.random.random((layers[i - <span class="number">1</span>] + <span class="number">1</span>, layers[i] + <span class="number">1</span>)) - <span class="number">1</span>) * <span class="number">0.25</span>)</div><div class="line">        self.weights.append(</div><div class="line">            (<span class="number">2</span> * np.random.random((layers[<span class="number">-2</span>] + <span class="number">1</span>, layers[<span class="number">-1</span>])) - <span class="number">1</span>) * <span class="number">0.25</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y, learning_rate=<span class="number">0.2</span>, epochs=<span class="number">10000</span>)</span>:</span></div><div class="line">        X = np.atleast_2d(X)</div><div class="line">        temp = np.ones([X.shape[<span class="number">0</span>], X.shape[<span class="number">1</span>] + <span class="number">1</span>])</div><div class="line">        temp[:, <span class="number">0</span>:<span class="number">-1</span>] = X  <span class="comment"># adding the bias unit to the input layer</span></div><div class="line">        X = temp</div><div class="line">        y = np.array(y)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(epochs):</div><div class="line">            i = np.random.randint(X.shape[<span class="number">0</span>])</div><div class="line">            a = [X[i]]</div><div class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> range(len(self.weights)):  <span class="comment"># going forward network, for each layer</span></div><div class="line">                a.append(self.activation(np.dot(a[l], self.weights[l])))</div><div class="line">            error = y[i] - a[<span class="number">-1</span>]  <span class="comment"># Computer the error at the top layer</span></div><div class="line">            <span class="comment"># For output layer, Err calculation (delta is updated error)</span></div><div class="line">            deltas = [error * self.activation_deriv(a[<span class="number">-1</span>])]</div><div class="line">            <span class="comment"># Staring backprobagation</span></div><div class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> range(len(a) - <span class="number">2</span>, <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">                deltas.append(deltas[<span class="number">-1</span>].dot(self.weights[l].T)</div><div class="line">                              * self.activation_deriv(a[l]))</div><div class="line">            deltas.reverse()</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.weights)):</div><div class="line">                layer = np.atleast_2d(a[i])</div><div class="line">                delta = np.atleast_2d(deltas[i])</div><div class="line">                self.weights[i] += learning_rate * layer.T.dot(delta)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, x)</span>:</span></div><div class="line">        x = np.array(x)</div><div class="line">        temp = np.ones(x.shape[<span class="number">0</span>] + <span class="number">1</span>)</div><div class="line">        temp[<span class="number">0</span>:<span class="number">-1</span>] = x</div><div class="line">        a = temp</div><div class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">0</span>, len(self.weights)):</div><div class="line">            a = self.activation(np.dot(a, self.weights[l]))</div><div class="line">        <span class="keyword">return</span> a</div><div class="line"></div><div class="line"></div><div class="line">nn = NeuralNetwork([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], <span class="string">'tanh'</span>)</div><div class="line">X = np.array([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]])</div><div class="line">y = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])</div><div class="line">nn.fit(X, y)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]]:</div><div class="line">    print(i, nn.predict(i))</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单的神经网络算法，包括基本的后向传播&lt;code&gt;BP&lt;/code&gt;算法，前向传播算法，更新权重使用的梯度下降算法，基本的框架算是有了，学习使用。&lt;br&gt;注意输入每一行数据时候在神经网络中会加入&lt;code&gt;bias&lt;/code&gt;偏量，神经网络的层数和每层个数为自定义，搞了很
      
    
    </summary>
    
    
      <category term="Machne Learning" scheme="http://sunlanchang.github.io/tags/Machne-Learning/"/>
    
  </entry>
  
</feed>
