<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunlanchang.github.io/"/>
  <updated>2018-07-03T02:32:27.459Z</updated>
  <id>http://sunlanchang.github.io/</id>
  
  <author>
    <name>Jason Sun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>北京邮电大学--数据结构考试大纲</title>
    <link href="http://sunlanchang.github.io/2018/07/03/%E5%8C%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%80%83%E8%AF%95%E5%A4%A7%E7%BA%B2/"/>
    <id>http://sunlanchang.github.io/2018/07/03/北京邮电大学-数据结构考试大纲/</id>
    <published>2018-07-03T02:15:33.000Z</published>
    <updated>2018-07-03T02:32:27.459Z</updated>
    
    <content type="html"><![CDATA[<p><strong>考查目标</strong></p><ol><li>掌握数据结构的基本概念、基本原理和基本方法。</li><li>掌握数据的逻辑结构、存储结构及基本操作的实现，能够对算法进行基本的时间复杂度与空间复杂度的分析。</li><li>能够运用数据结构基本原理和方法进行问题的分析与求解，具备采用C或C++语言设计与实现算法的能力。</li></ol><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><ul><li>线性表的定义和基本操作</li><li>线性表的实现<ol><li>顺序存储　　</li><li>链式存储　　</li><li>线性表的应用</li></ol></li></ul><h1 id="栈、队列和数组"><a href="#栈、队列和数组" class="headerlink" title="栈、队列和数组"></a>栈、队列和数组</h1><ul><li>栈和队列的基本概念　　</li><li>栈和队列的顺序存储结构</li><li>栈和队列的链式存储结构</li><li>栈和队列的应用</li><li>特殊矩阵的压缩存储</li></ul><h1 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h1><ul><li>树的基本概念</li><li><p>二叉树</p><ol><li>二叉树的定义及其主要特征　　</li><li>二叉树的顺序存储结构和链式存储结构　　</li><li>二叉树的遍历</li><li>线索二叉树的基本概念和构造</li></ol></li><li><p>树、森林</p><ol><li>树的存储结构　　</li><li>森林与二叉树的转换　　</li><li>树和森林的遍历</li></ol></li><li><p>树与二叉树的应用</p><ol><li>二叉排序树</li><li>平衡二叉树</li><li>哈夫曼(Huffman)树和哈夫曼编码</li></ol></li></ul><p>#　图</p><ul><li>图的基本概念</li><li><p>图的存储及基本操作</p><ol><li>邻接矩阵法</li><li>邻接表法　　</li><li>邻接多重表、十字链表</li></ol></li><li><p>图的遍历</p><ol><li>深度优先搜索</li><li>广度优先搜索</li></ol></li><li><p>图的基本应用</p><ol><li>最小（代价）生成树　　</li><li>最短路径　　</li><li>拓扑排序　　</li><li>关键路径</li></ol></li></ul><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><ul><li>查找的基本概念　　</li><li>顺序查找法　　</li><li>分块查找法</li><li>折半查找法　　</li><li>B树及其基本操作、B+树的基本概念</li><li>散列(Hash)表　　</li><li>字符串模式匹配　　</li><li>查找算法的分析及应用</li></ul><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><ul><li>排序的基本概念</li><li><p>插入排序</p><ol><li>直接插入排序　　</li><li>折半插入排序</li></ol></li><li><p>气泡排序(bubble sort)　　</p></li><li>简单选择排序</li><li>希尔排序(shell sort)　　</li><li>快速排序</li><li>堆排序　　</li><li>二路归并排序(merge sort)</li><li>基数排序　　</li><li>外部排序</li><li>）各种内部排序算法的比较　　</li><li>）排序算法的应用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;考查目标&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;掌握数据结构的基本概念、基本原理和基本方法。&lt;/li&gt;
&lt;li&gt;掌握数据的逻辑结构、存储结构及基本操作的实现，能够对算法进行基本的时间复杂度与空间复杂度的分析。&lt;/li&gt;
&lt;li&gt;能够运用数据结构基本原理
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pandas常用代码</title>
    <link href="http://sunlanchang.github.io/2018/07/02/pandas%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    <id>http://sunlanchang.github.io/2018/07/02/pandas常用代码/</id>
    <published>2018-07-02T08:18:32.000Z</published>
    <updated>2018-07-03T02:14:45.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dataframe-选取某几列"><a href="#dataframe-选取某几列" class="headerlink" title="dataframe 选取某几列"></a>dataframe 选取某几列</h1><p>import pandas as pd<br>df = pd.DataFrame({‘a’:[3,2,4,5,6],’b’:range(5,10)})<br>df[[‘a’]]</p><h1 id="取df的feature和label"><a href="#取df的feature和label" class="headerlink" title="取df的feature和label"></a>取df的feature和label</h1><p>df[df.columns[:-1]]</p><h1 id="注意取一列默认为series"><a href="#注意取一列默认为series" class="headerlink" title="注意取一列默认为series"></a>注意取一列默认为series</h1><p>df[df.columns[-1]]</p><h1 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h1><p>df_user.sexes.value_counts()</p><h1 id="dataframe-to-excel"><a href="#dataframe-to-excel" class="headerlink" title="dataframe to excel"></a>dataframe to excel</h1><p>df_user.to_excel(‘user.xls’,columns=[‘names’,’sexes’,’cities’,’signatures’,’remark_names’], index=False)<br>df_user = pd.DataFrame.from_dict(user_data)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dataframe-选取某几列&quot;&gt;&lt;a href=&quot;#dataframe-选取某几列&quot; class=&quot;headerlink&quot; title=&quot;dataframe 选取某几列&quot;&gt;&lt;/a&gt;dataframe 选取某几列&lt;/h1&gt;&lt;p&gt;import pandas as p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git总结</title>
    <link href="http://sunlanchang.github.io/2018/07/02/Git%E6%80%BB%E7%BB%93/"/>
    <id>http://sunlanchang.github.io/2018/07/02/Git总结/</id>
    <published>2018-07-02T02:01:38.000Z</published>
    <updated>2018-07-02T03:40:30.269Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2018_07_02_git_stage.jpeg" alt="Git" title="">                </div>                <div class="image-caption">Git</div>            </figure><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li>设置用户名<code>git config --global user.name &quot;Your Name&quot;</code></li><li>设置邮箱<code>git config --global user.email &quot;email@example.com&quot;</code></li><li>创建仓库 <code>git init</code></li><li>添加文件到暂存区 <code>git add $file_name</code></li><li>提交暂存区文件到仓库 <code>git commit -m &lt;some_words&gt;</code></li><li>查看commit记录 <code>git log --pretty=oneline</code></li><li>查看Git状态 <code>git status</code></li></ul><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><ul><li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard $commit_id</code>。</li><li>要重返未来，用 <code>git reflog</code> 查看命令历史，以便确定要回到未来的哪个版本。</li><li>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</li></ul><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ul><li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</li><li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2018_07_02_git_branch.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><ul><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git checkout &lt;name&gt;</code></li><li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code></li></ul><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>用git log –graph命令可以看到分支合并图。</p><ul><li>合并分支 <code>git merge &lt;brach_name&gt;</code></li><li>查看冲突文件 <code>git status</code></li><li>编辑文件手工解决冲突</li></ul><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p><ul><li>查看远程库信息，使用git remote -v；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</li><li>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>Git会适当地显示不同的颜色 <code>git config --global color.ui true</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于nodejs的语音聊天</title>
    <link href="http://sunlanchang.github.io/2018/06/24/%E5%9F%BA%E4%BA%8Enodejs%E7%9A%84%E8%AF%AD%E9%9F%B3%E8%81%8A%E5%A4%A9/"/>
    <id>http://sunlanchang.github.io/2018/06/24/基于nodejs的语音聊天/</id>
    <published>2018-06-24T07:30:44.000Z</published>
    <updated>2018-06-24T07:57:17.266Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br>  <img src="/images/语音聊天.png"><br></div><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>程序在 <a href="https://github.com/iamshaunjp/websockets-playlist/tree/lesson-5" target="_blank" rel="external">iamshaunjp</a> 的群聊功能基础上利用webRTC技术，添加了语音群聊功能，在其他人键盘输入时，会出现类似微信的对方正在输入字样。</p><ul><li>demo：<a href="https://biptedu.cn:4000/" target="_blank" rel="external">https://biptedu.cn:4000/</a></li><li>source code: <a href="https://github.com/sunlanchang/voice_chat" target="_blank" rel="external">https://github.com/sunlanchang/voice_chat</a></li></ul><p><strong>使用的nodejs模块</strong></p><ul><li><code>express</code>：创建一个web服务器</li><li><code>https</code>：创建https连接（局域网或者外网webRTC需要https连接，具体见<a href="https://www.html5rocks.com/en/tutorials/webrtc/basics/" target="_blank" rel="external">tutoril</a>）</li><li><code>socket.io</code>：客户端与服务端实时通信</li></ul><p><strong>js文件</strong></p><ul><li><code>chat.js</code>：实现按钮事件的注册、文本数据的发送等</li><li><code>record.js</code>：实现语音消息的录取、播放、发送等</li></ul><h2 id="结构图和流程图"><a href="#结构图和流程图" class="headerlink" title="结构图和流程图"></a>结构图和流程图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/架构.png" alt="架构图" title="">                </div>                <div class="image-caption">架构图</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/语音聊天流程图.png" alt="流程图" title="">                </div>                <div class="image-caption">流程图</div>            </figure><h2 id="文本通信"><a href="#文本通信" class="headerlink" title="文本通信"></a>文本通信</h2><p><strong>详情见<code>public/js/chat.js</code>注释</strong></p><p><strong>发送数据</strong></p><ul><li>进入页面进行与服务器的<code>socket</code>连接</li><li>客户端输入文本数据</li><li>客户点击<code>sent</code>按钮，触发<code>click</code>事件，并产生<code>chat</code>事件准备想服务器<code>emit</code></li><li><code>soket</code>连接发送给服务器chat事件和客户端产生的数据</li></ul><p><strong>接收数据</strong></p><ul><li><code>socket</code>接受到服务器发送来的data和服务器发送来的chat事件</li><li>提取data文本</li><li>js在<code>index.html</code>添加文本数据，完成接收数据并显示</li></ul><h2 id="语音通信"><a href="#语音通信" class="headerlink" title="语音通信"></a>语音通信</h2><p><strong>详情见<code>public/js/record.js</code>注释</strong></p><ul><li>接受和发送语音数据类似与文本数据的通信</li><li>利用<code>webRTC</code>获取到用户的视频或者音频转换为<code>blob</code>格式数据，并发送给服务器数据。</li><li>接受消息时，数据类型是<code>blob</code>格式，对<code>blob</code>数据解析，利用html5的audio标签进行播放</li></ul><h2 id="服务器转发数据"><a href="#服务器转发数据" class="headerlink" title="服务器转发数据"></a>服务器转发数据</h2><p>客户端发送给服务器数据，服务器触发<code>chat</code>事件，将客户端发送来的数据以广播的形式发送到每一个客户端，完成群聊的功能。</p><h2 id="创建https证书"><a href="#创建https证书" class="headerlink" title="创建https证书"></a>创建https证书</h2><p>在localhost中使用webRTC不需要使用https，但是在局域网或者外网使用webRTC，必须强制使用webRTC，这里采用自己生成证书供测试使用，具体生成方法和设置https方法<a href="http://blog.mgechev.com/2014/02/19/create-https-tls-ssl-application-with-express-nodejs/" target="_blank" rel="external">参考博客</a>：</p><ul><li><p>生成自己签名的证书（有效期365天）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365</div></pre></td></tr></table></figure></li><li><p>使用https连接的express，例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</div><div class="line">  https = <span class="built_in">require</span>(<span class="string">'https'</span>),</div><div class="line">  express = <span class="built_in">require</span>(<span class="string">'express'</span>),</div><div class="line">  app = express();</div><div class="line"></div><div class="line">  https.createServer(&#123;</div><div class="line">    key: fs.readFileSync(<span class="string">'key.pem'</span>),</div><div class="line">    cert: fs.readFileSync(<span class="string">'cert.pem'</span>)</div><div class="line">  &#125;, app).listen(<span class="number">55555</span>);</div><div class="line"></div><div class="line">  app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.header(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>);</div><div class="line">    <span class="keyword">return</span> res.end(<span class="string">'&lt;h1&gt;Hello, Secure World!&lt;/h1&gt;'</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;center&quot;&gt;&lt;br&gt;  &lt;img src=&quot;/images/语音聊天.png&quot;&gt;&lt;br&gt;&lt;/div&gt;


&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;程序在
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018全国高校大数据应用创新大赛</title>
    <link href="http://sunlanchang.github.io/2018/06/24/2018%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B/"/>
    <id>http://sunlanchang.github.io/2018/06/24/2018全国高校大数据应用创新大赛/</id>
    <published>2018-06-24T05:26:26.000Z</published>
    <updated>2018-06-24T07:33:21.773Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br>  <img src="/images/高校大数据应用创新大赛.png"><br><br><br></div><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><ul><li>训练阶段：组委会提供25000条数据作为训练数据，参赛队伍报名后可从大赛官网下载训练数据集，并进行算法设计、训练和优化。</li><li>预赛阶段：组委会提供10万条数据作为预赛数据集。参赛队伍使用自己的算法，对这10万条数据进行“优化等级”标注。本竞赛将以优化等级标注的准确率作为选手预赛的得分。</li><li>分赛区决赛和全国总决赛阶段。组委会提供100万条正式比赛数据，参赛队伍使用自己的算法，对这100万条数据进行“优化等级”标注。本竞赛将以优化等级标注的准确率作为选手决赛的技术得分，结合决赛答辩评出最终名次。</li><li>详情见 <a href="http://117.50.29.62/pc/competition_topic.jsp" target="_blank" rel="external">http://117.50.29.62/pc/competition_topic.jsp</a></li></ul><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><table><thead><tr><th>环境</th><th>版本</th><th>Python模块</th><th>版本</th></tr></thead><tbody><tr><td>Ubuntu</td><td>16.04</td><td>tensorflow</td><td>1.8</td></tr><tr><td>Anaconda</td><td>5.1</td><td>numpy</td></tr><tr><td>Python</td><td>3.6</td><td>pandas</td></tr><tr><td>Jupyter lab</td><td>0.31.5</td><td>matplotlib</td></tr></tbody></table><h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><ul><li>标签列为数字特征，不做处理。</li><li>数据中特征列有花色，牌面等信息为字母标注，将其替换成数字特征，模型相对比较容易处理。比如C替换成1，D替换成2等。如下列代码所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NAMES = [<span class="string">'col'</span>+str(e) <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">11</span>)]</div><div class="line">df_train = pd.read_csv(<span class="string">'data/train.csv'</span>,names=NAMES,index_col=<span class="keyword">False</span>)</div><div class="line">huase_to_num = &#123;<span class="string">'C'</span>:<span class="number">1</span>,<span class="string">'D'</span>:<span class="number">2</span>,<span class="string">'H'</span>:<span class="number">3</span>,<span class="string">'S'</span>:<span class="number">4</span>&#125;</div><div class="line">paimian_to_num = &#123;<span class="string">'J'</span>:<span class="number">11</span>,<span class="string">'Q'</span>:<span class="number">12</span>,<span class="string">'K'</span>:<span class="number">13</span>&#125;</div><div class="line">df_train=df_train.replace(huase_to_num).replace(paimian_to_num)</div></pre></td></tr></table></figure><h1 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h1><ul><li>前10列特阵列的数字特征</li><li>可以考虑使用交叉列输入神经网络</li></ul><p>代码示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">feature_columns = []</div><div class="line"><span class="keyword">for</span> col <span class="keyword">in</span> NAMES[:<span class="number">-1</span>]:</div><div class="line">    feature_columns.append(tf.feature_column.numeric_column(key=col))</div><div class="line">feature_columns</div></pre></td></tr></table></figure><h1 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h1><ul><li>神经网络采用三层隐藏层，神经元个数分别是1536,768,384</li><li>优化函数采用<code>ProximalAdagradOptimizer</code></li><li>学习率0.005</li><li>L1正则化率0.001</li><li>L2正则化率0.001</li></ul><p>具体代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">cls = tf.estimator.DNNClassifier(</div><div class="line">    feature_columns=feature_columns,</div><div class="line">    hidden_units=[<span class="number">1536</span>,<span class="number">768</span>,<span class="number">384</span>],</div><div class="line">    n_classes=numClasses,</div><div class="line">    optimizer=tf.train.ProximalAdagradOptimizer(</div><div class="line">    learning_rate=<span class="number">0.005</span>,</div><div class="line">    l1_regularization_strength=<span class="number">0.001</span>,</div><div class="line">    l2_regularization_strength=<span class="number">0.001</span></div><div class="line">        </div><div class="line">    ))</div></pre></td></tr></table></figure></p><h1 id="模型训练与预测"><a href="#模型训练与预测" class="headerlink" title="模型训练与预测"></a>模型训练与预测</h1><p>对已有的数据进行2000次训练，准确率如下图，20分钟训练模型2000次准确率99.5%</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/accuracy.png" alt="准确率" title="">                </div>                <div class="image-caption">准确率</div>            </figure><h1 id="查看训练数据和预测数据分布"><a href="#查看训练数据和预测数据分布" class="headerlink" title="查看训练数据和预测数据分布"></a>查看训练数据和预测数据分布</h1><ul><li>对数据进行预测并画出柱形图对比分布，如下图</li><li>大体可以看出分布是相同的</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/train分布.png" alt="训练数据分布" title="">                </div>                <div class="image-caption">训练数据分布</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/predict分布.png" alt="预测数据分布" title="">                </div>                <div class="image-caption">预测数据分布</div>            </figure><h1 id="提高"><a href="#提高" class="headerlink" title="提高"></a>提高</h1><ul><li>训练的数据有一定的规律，下一步考虑使用一定的规则来优化模型</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;center&quot;&gt;&lt;br&gt;  &lt;img src=&quot;/images/高校大数据应用创新大赛.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>拉勾网爬虫与数据分析</title>
    <link href="http://sunlanchang.github.io/2018/06/02/%E6%8B%89%E5%8B%BE%E7%BD%91%E7%88%AC%E8%99%AB%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>http://sunlanchang.github.io/2018/06/02/拉勾网爬虫与数据分析/</id>
    <published>2018-06-02T05:00:45.000Z</published>
    <updated>2018-06-02T05:01:43.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拉勾网爬虫与数据挖掘"><a href="#拉勾网爬虫与数据挖掘" class="headerlink" title="拉勾网爬虫与数据挖掘"></a>拉勾网爬虫与数据挖掘</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>爬取拉勾网50万条职位信息，进行数据清洗，简单的数据分析。流程图如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Lagou.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><strong>一个demo展示外观：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/index.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><strong>操作系统</strong>  </p><ul><li>Ubuntu 16.04</li><li>mac OS 10.13.3 </li></ul><p><strong>数据获取</strong>  </p><ul><li>Chrome</li><li>Python3</li></ul><p><strong>数据清洗</strong>  </p><ul><li>Excel</li><li>DataGrip</li><li>MySQL</li><li>phpMyAdmin</li><li>VScode</li><li>Anaconda Jupyter Notebook</li></ul><p><strong>数据分析</strong>  </p><ul><li>Excel</li><li>DataGrip</li><li>MySQL</li><li>phpMyAdmin</li><li>Anaconda Jupyter Notebook</li></ul><p><strong>数据可视化</strong></p><ul><li>HTML</li><li>Bootstrap</li><li>JavaScript</li><li>PHP</li><li>Echarts</li></ul><h3 id="Python模块"><a href="#Python模块" class="headerlink" title="Python模块"></a>Python模块</h3><ul><li>request</li><li>BeautifulSoup</li><li>Json</li><li>numpy</li><li>pandas</li><li>matplotlib</li><li>sklearn</li><li>pymysql<h3 id="文件描述"><a href="#文件描述" class="headerlink" title="文件描述"></a>文件描述</h3></li><li><code>get_position.py</code>爬取拉勾网的爬虫程序</li><li><code>position_name.txt</code>保存拉勾所有职位<h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2></li><li>使用Chrom分析拉勾源码，发现拉勾网使用Ajax请求数据如下图所示：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/ajax.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>返回的数据是Json格式，处理起来非常方便，如下图所示：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/json.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li>需要的职位信息在<code>object -&gt; content -&gt; positionResult -&gt; result</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/json_tree.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p>使用多线程策略在mac中，校园网环境下进行职位详情页的爬取，并采用BeautifulSoup4提取出网页中需要的文字信息，以便后期大数据分析。处理速度达到了每秒20个职位。</p></li><li><p>拉勾的反爬虫策略<br>header不加session直接请求拉勾服务器，在请求数次之后就会被拒绝。手动注册账号登录拉勾网，利用Chrome开发工具将header的session后的字符串复制下载，加到程序的header中。这样再请求拉勾服务器就不会被拒绝了。注意超过一天之后session就失效了，登录账号更换一个新的session即可。</p></li></ul><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><h3 id="去重-SQL"><a href="#去重-SQL" class="headerlink" title="去重(SQL)"></a>去重(SQL)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tmp2 <span class="keyword">as</span> <span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">as</span> <span class="keyword">mid</span> <span class="keyword">from</span> tab3 <span class="keyword">group</span> <span class="keyword">by</span> 职位<span class="keyword">ID</span></div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> lagou2 <span class="keyword">as</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> lagou <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">SELECT</span> <span class="keyword">mid</span> <span class="keyword">from</span> tmp2)</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"><span class="string">### 去重(Pandas)</span></div><div class="line"><span class="string">- 经过手工的查看有大量的重复值，使用`</span>pandas<span class="string">`的`</span>drop_duplicates(subset=[<span class="string">'positionId'</span>])<span class="string">`将重复的`</span>positionId<span class="string">`去掉，只保留一行重复记录。</span></div><div class="line"><span class="string">- 用`</span>pandas<span class="string">`的`</span>pandas.DataFrame.to_csv()<span class="string">`将去重的文件保存为csv文件</span></div><div class="line"><span class="string">- Excel 2016打开去重的csv文件，利用快速填充提取字段的`</span><span class="number">4</span>k<span class="number">-8</span>k<span class="string">`等工资字段，取平均值。工作年限使用同样的操作提取</span></div><div class="line"><span class="string">- 创建MySQL数据库以导入csv文件，创建数据库如下,这里用的是`</span>phpMyAdmin<span class="string">`手动创建数据库字段，自动生成创建语句：</span></div><div class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">sql</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`LAGOU`</span>.<span class="string">`position`</span> ( <span class="string">`ID`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT , <span class="string">`positionId`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`positionLables`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`positionName`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`positionAdvantage`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`firstType`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`secondType`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`workYear`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`education`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`salary`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`isSchoolJob`</span> <span class="built_in">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`companyId`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`companyShortName`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`companyFullName`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`companySize`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`financeStage`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`industryField`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`industryLables`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`createTime`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`formatCreateTime`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`city`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`district`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`businessZones`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`linestaion`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`stationname`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , PRIMARY <span class="keyword">KEY</span> (<span class="string">`ID`</span>)) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></div></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>对文本数据进行数字编码，工作年限和工资等信息做统一的编码。 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> L拉勾 <span class="keyword">ADD</span> 工作年限 <span class="built_in">INT</span> <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> L拉勾</div><div class="line">  <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> 工作年限 <span class="built_in">INT</span> <span class="keyword">AFTER</span> 工龄;</div><div class="line"><span class="keyword">UPDATE</span> L拉勾 <span class="keyword">SET</span> 工作年限 = <span class="number">4</span> <span class="keyword">WHERE</span> 工龄 = <span class="string">'3-5年'</span>;</div><div class="line"><span class="keyword">UPDATE</span> L拉勾 <span class="keyword">SET</span> 工作年限 = <span class="number">2</span> <span class="keyword">WHERE</span> 工龄 = <span class="string">'1-3年'</span>;</div><div class="line"><span class="keyword">UPDATE</span> L拉勾 <span class="keyword">SET</span> 工作年限 = <span class="number">8</span> <span class="keyword">WHERE</span> 工龄 = <span class="string">'5-10年'</span>;</div><div class="line"><span class="keyword">UPDATE</span> L拉勾 <span class="keyword">SET</span> 工作年限 = <span class="number">10</span> <span class="keyword">WHERE</span> 工龄 = <span class="string">'十年以上'</span>;</div><div class="line"><span class="keyword">UPDATE</span> L拉勾 <span class="keyword">SET</span> 工作年限 = <span class="number">1</span> <span class="keyword">WHERE</span> 工龄 = <span class="string">'一年以下'</span>;</div><div class="line"><span class="keyword">UPDATE</span> L拉勾 <span class="keyword">SET</span> 工作年限 = <span class="number">0</span> <span class="keyword">WHERE</span> 工龄 = <span class="string">'应届毕业生'</span>;</div></pre></td></tr></table></figure><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><h3 id="利用MySQL进行简单的统计分析"><a href="#利用MySQL进行简单的统计分析" class="headerlink" title="利用MySQL进行简单的统计分析"></a>利用MySQL进行简单的统计分析</h3><ul><li>招收人数最多的几个职位<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> 企业简称, <span class="keyword">COUNT</span>(企业简称) <span class="keyword">as</span> cnt <span class="keyword">FROM</span> L拉勾 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 企业简称</div></pre></td></tr></table></figure></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./analysis_picture/position_order.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>前100公司的招收人数<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> 企业简称,<span class="keyword">COUNT</span>(企业简称) <span class="keyword">as</span> cnt <span class="keyword">FROM</span> L拉勾 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 企业简称 <span class="keyword">ORDER</span> <span class="keyword">BY</span> cnt <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">100</span></div></pre></td></tr></table></figure></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./analysis_picture/company_staff.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>月薪最高的100个职位<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> 职位名称,<span class="keyword">avg</span>(工资) <span class="keyword">as</span> money <span class="keyword">FROM</span> L拉勾 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 职位名称 <span class="keyword">ORDER</span> <span class="keyword">BY</span> money <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">100</span></div></pre></td></tr></table></figure></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./analysis_picture/position_salary.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>学历水平工资<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> 学历,<span class="keyword">avg</span>(工资) <span class="keyword">as</span> money <span class="keyword">FROM</span> L拉勾 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 学历 <span class="keyword">ORDER</span> <span class="keyword">BY</span> money <span class="keyword">DESC</span></div></pre></td></tr></table></figure></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./analysis_picture/degree_salary.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>各个公司招收人的工薪水平<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> 企业简称,<span class="keyword">COUNT</span>(企业简称) <span class="keyword">as</span> cnt ,<span class="keyword">avg</span>(工资) <span class="keyword">as</span> money <span class="keyword">FROM</span> L拉勾 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 企业简称 <span class="keyword">ORDER</span> <span class="keyword">BY</span> cnt <span class="keyword">DESC</span>,money <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">100</span></div></pre></td></tr></table></figure></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./analysis_picture/salary_for_company.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="利用SKlearn进行数据分析"><a href="#利用SKlearn进行数据分析" class="headerlink" title="利用SKlearn进行数据分析"></a>利用SKlearn进行数据分析</h2><h2 id="数据预处理（中文分词、去除标点符号）"><a href="#数据预处理（中文分词、去除标点符号）" class="headerlink" title="数据预处理（中文分词、去除标点符号）"></a>数据预处理（中文分词、去除标点符号）</h2><p>先构建一个字典过滤标点符号，通过Python的<code>jieba</code>模块进行精确匹配模式进行分词后用空格分隔。示例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding=utf-8</span></div><div class="line">chrs = [<span class="string">'，'</span>,<span class="string">'。'</span>,<span class="string">'！'</span>,<span class="string">'、'</span>,<span class="string">'；'</span>,<span class="string">'：'</span>,<span class="string">'？'</span>,<span class="string">'~'</span>,<span class="string">'('</span>,<span class="string">')'</span>,<span class="string">'；'</span>,<span class="string">';'</span>,<span class="string">','</span>,<span class="string">'\n'</span>,<span class="string">'\t'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>,<span class="string">'.'</span>,<span class="string">'\''</span>]</div><div class="line">corpus = []</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> corpus_raw:</div><div class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> chrs:</div><div class="line">        line = line.replace(ch,<span class="string">''</span>)</div><div class="line">    Word_spilt_jieba = jieba.cut(line,cut_all = <span class="keyword">False</span>)</div><div class="line">    line = <span class="string">' '</span>.join(Word_spilt_jieba)</div><div class="line">    corpus.append(line)</div><div class="line">print(corpus[<span class="number">0</span>:<span class="number">3</span>])</div></pre></td></tr></table></figure></p><p><strong>对于职位的描述分词之后的（一个职位描述样本）如下所示，包含一些明确的关键词，同样也包含一些无关紧要的数字，在这里先不处理数字英文单词之类的（后续的预测准确率表明数字对结果影响不大）：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">职位 要求 1 有 互联网 和 移动 互联网 行业 3 年 以上 产品 经理 从业 经验 2 独立 承担 项目 丰富 的 ERP 产品设计 经验 2 懂 app 基本 设计 流程 熟悉 微信 公众 号 的 后台 框架 及 运营 3 具备 项目 方案 起草 需求 整理 开发计划 及 相关 业务 对接 的 能力 4 有 很 强 的 产品 逻辑 与 项目 执行 能力 协调 沟通 部门 内外部 的 资源 5 具备 决策 和 项目 团队 管理 经验</div></pre></td></tr></table></figure></p><h2 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h2><h3 id="词袋模型（-Bag-of-Words-Model-）"><a href="#词袋模型（-Bag-of-Words-Model-）" class="headerlink" title="词袋模型（ Bag-of-Words Model ）"></a>词袋模型（ Bag-of-Words Model ）</h3><ol><li>使用机器学习算法时，我们不能直接使用文本。相反，我们需要将文本转换为数字。  </li><li>对文档进行分类，每一类文档都是“输入”，而类别标签是我们预测算法的“输出”。算法将数字向量作为输入，因此我们需要将文档转换为固定长度的数字向量。  </li><li>上面这一步可以通过为每个单词分配一个唯一的编码来完成。我们所看到的任何文档都可以被编码为一个固定长度的矢量，其长度为文档中全部已知单词的词汇量。矢量中每个位置的值可以用编码文档中每个单词的出现个数或频率填充。  </li><li>在词袋模型中，我们只关心编码方案，而编码方案描述了文档中出现了什么单词，以及这些单词在编码文档中出现的频率，而没有任何关于顺序的信息。  </li></ol><p><strong>对所有职位信息通过Python拉取数据库数据进行遍历，构建一个非常大的词袋，拉去50条职位描述信息时，构成的词袋长度就有2000条左右，这里局限于个人电脑和服务器的内存太小只用了小样本进行了构建词袋</strong></p><h3 id="使用-CountVectorizer-计算词频"><a href="#使用-CountVectorizer-计算词频" class="headerlink" title="使用 CountVectorizer 计算词频"></a>使用 CountVectorizer 计算词频</h3><p>CountVectorizer 提供了一个简单的方法，既可以标记文本文档的集合, 也可以生成每个已知单词的索引, 还可以使用这一套索引对新文档进行编码。  </p><p>下面是一种使用方法：</p><ul><li>实例化一个 CountVectorizer 类。</li><li>调用 fit() 函数以从一个或多个文档中建立索引。</li><li>根据需要在一个或多个文档中调用 transform() 函数，将每个文档编码为一个向量。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#该类会将文本中的词语转换为词频矩阵，矩阵元素a[i][j] 表示j词在i类文本下的词频  </div><div class="line">vectorizer=CountVectorizer()    </div><div class="line">X = vectorizer.fit_transform(corpus)</div></pre></td></tr></table></figure><p>转换后的结果可以看到<code>X.shape</code>为<code>n*m</code>，其中n为样本个数，m为特征个数，这里小样本词频测试输出如下（90%以上的都是0概率，可见是一个非常稀疏的矩阵）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.116133204036</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0924905834836</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0801139896408</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.230164048616</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0930653754409</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.106744931403</span> <span class="number">0.106744931403</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0922569939759</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.184513987952</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0563738344688</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.117308212104</span> <span class="number">0.117308212104</span> <span class="number">0.117308212104</span> <span class="number">0.0</span> <span class="number">0.103965978559</span> <span class="number">0.0</span> <span class="number">0.117308212104</span> <span class="number">0.117308212104</span> <span class="number">0.0</span> <span class="number">0.117308212104</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.076084797887</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line">  ......</div></pre></td></tr></table></figure></p><blockquote><p>稀疏矩阵<br>由于大多数文本文档通常只使用文本词向量全集中的一个小子集，所以得到的矩阵将具有许多特征值为零（通常大于99％）。<br>例如，10,000 个短文本文档（如电子邮件）的集合将使用总共100,000个独特词的大小的词汇，而每个文档将单独使用100到1000个独特的单词。<br>为了能够将这样的矩阵存储在存储器中，并且还可以加速代数的矩阵/向量运算，实现通常将使用诸如 scipy.sparse 包中的稀疏实现。<br>构造稀疏矩阵，对每一条记录分词之后</p><h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><p>在一个大的文本语料库中，一些单词将出现很多次（例如 “the”, “a”, “is” 是英文），因此对文档的实际内容没有什么有意义的信息。 如果我们将直接计数数据直接提供给分类器，那么这些频繁词组会掩盖住那些我们关注但很少出现的词。<br>为了为了重新计算特征权重，并将其转化为适合分类器使用的浮点值，因此使用 tf-idf 变换是非常常见的。  </p></blockquote><h3 id="如何使用-TfidfVectorizer-将文本转换为词频向量。"><a href="#如何使用-TfidfVectorizer-将文本转换为词频向量。" class="headerlink" title="如何使用 TfidfVectorizer 将文本转换为词频向量。"></a>如何使用 TfidfVectorizer 将文本转换为词频向量。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#该类会统计每个词语的tf-idf权值  </span></div><div class="line">transformer=TfidfTransformer()</div><div class="line">tfidf=transformer.fit_transform(X)</div></pre></td></tr></table></figure><p>这里降低不具有特征的词语例如’的‘，’是‘等。转换的矩阵仍然是一个非常稀疏的矩阵，例如这里的前20,职位描述和前20个特征词语概率如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.116133204036</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0924905834836</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0801139896408</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.230164048616</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0930653754409</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.106744931403</span> <span class="number">0.106744931403</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0922569939759</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.184513987952</span> <span class="number">0.0</span> <span class="number">0.0</span> </div><div class="line"><span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0563738344688</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">0.0</span></div></pre></td></tr></table></figure></p><h2 id="数据维度太大的解决思路"><a href="#数据维度太大的解决思路" class="headerlink" title="数据维度太大的解决思路"></a>数据维度太大的解决思路</h2><h3 id="使用-HashingVectorizer-执行外核缩放"><a href="#使用-HashingVectorizer-执行外核缩放" class="headerlink" title="使用 HashingVectorizer 执行外核缩放"></a>使用 HashingVectorizer 执行外核缩放</h3><ul><li>使用 HashingVectorizer 的一个有趣的开发是执行外核 out-of-core 缩放的能力。 这意味着我们可以从无法放入电脑主内存的数据中进行学习。</li><li>项目等待完成的部分，也是可以优化计算的地方，在小样本测试算法成功后，可以使用此算法进行优化计算，以便在个人PC进行计算。</li></ul><p><strong>每批的向量化都是用HashingVectorizer这样来保证评估器的输入空间的维度是相等的。因此任何时间使用的内存数都限定在小频次的大小。 尽管用这种方法可以处理的数据没有限制，但是从实用角度学习时间受到想要在这个任务上花费的CPU时间的限制。</strong></p><h2 id="推荐职位"><a href="#推荐职位" class="headerlink" title="推荐职位"></a>推荐职位</h2><ul><li>这里将推荐看做一个监督学习的分类问题，用户提供个人信息，利用训练完成的分类器对用户进行分类，将用户分类到某一个适合他的职位。具体实现思路是将用户的详情用训练的tf-idf转换器转换为一个稀疏矩阵，将稀疏矩阵输入分类器，分类器对其分类到某一个职位。</li></ul><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><ol><li>利用<code>Python</code>动态拉取数据库的某一职位数据，对职位进行统一的编码，例如：<code>[&#39;产品经理&#39;,&#39;前端开发工程师&#39;,&#39;测试工程师&#39;,&#39;平面设计师&#39;,&#39;UI设计师&#39;]</code>将其编码为<code>[1,2,3,4,5]</code>，另一个实现是用One-Hot编码，两种实现均可，在这里发现第一种编码效果还是非常的不错。利用整个数据集训练时可以考虑使用One-Hot编码。</li><li>利用构造好的数据矩阵和标签矩阵进行训练，使用SVM模型（默认参数）<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm </div><div class="line"><span class="comment"># 使用SVM模型</span></div><div class="line">clf = svm.SVC()</div><div class="line">clf.fit(weight,y)</div><div class="line"><span class="comment"># SVM模型的参数</span></div><div class="line">SVC(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="keyword">None</span>, coef0=<span class="number">0.0</span>,</div><div class="line">  decision_function_shape=<span class="string">'ovr'</span>, degree=<span class="number">3</span>, gamma=<span class="string">'auto'</span>, kernel=<span class="string">'rbf'</span>,</div><div class="line">  max_iter=<span class="number">-1</span>, probability=<span class="keyword">False</span>, random_state=<span class="keyword">None</span>, shrinking=<span class="keyword">True</span>,</div><div class="line">  tol=<span class="number">0.001</span>, verbose=<span class="keyword">False</span>)</div></pre></td></tr></table></figure></li></ol><h3 id="评测准确率"><a href="#评测准确率" class="headerlink" title="评测准确率"></a>评测准确率</h3><ul><li>利用Python动态拉取MySQL数据的描述信息进行分词、构建稀疏矩阵、构造tf-idf稀疏矩阵、构造编码后标签矩阵输入模型对数据进行预测，并对照数据库的标签，对结果集进行验证准确率在90%以上，如下图对产品经理分类：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># test_data为测试数据的稀疏矩阵</span></div><div class="line">clf.predict(test_data)</div></pre></td></tr></table></figure><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 对20个产品经理小样本的预测分类准确率在100%</span></div><div class="line">array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</div></pre></td></tr></table></figure></p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ul><li><p>去重查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> positionId,<span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> positionId) <span class="keyword">FROM</span> <span class="keyword">position</span> <span class="keyword">GROUP</span> <span class="keyword">by</span> positionId</div></pre></td></tr></table></figure></li><li><p>查询各个职位招收人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> 职位名称,<span class="keyword">COUNT</span>(职位名称) <span class="keyword">FROM</span> L拉勾职位表 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 职位名称 <span class="keyword">order</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(职位名称) <span class="keyword">desc</span></div></pre></td></tr></table></figure></li></ul><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`LAGOU`</span>.<span class="string">`position`</span> ( <span class="string">`ID`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT , <span class="string">`positionId`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`positionLables`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`positionName`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`positionAdvantage`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`firstType`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`secondType`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`workYear`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`education`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`salary`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`isSchoolJob`</span> <span class="built_in">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`companyId`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`companyShortName`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`companyFullName`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`companySize`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`financeStage`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`industryField`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`industryLables`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`createTime`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`formatCreateTime`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`city`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`district`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`businessZones`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`linestaion`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , <span class="string">`stationname`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> , PRIMARY <span class="keyword">KEY</span> (<span class="string">`ID`</span>)) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></div></pre></td></tr></table></figure><h2 id="导入导出数据库"><a href="#导入导出数据库" class="headerlink" title="导入导出数据库"></a>导入导出数据库</h2><h3 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h3><ul><li><p>导出数据库为sql文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysqldump -u root -p database_name table_name &gt; dump.txt</div><div class="line">password *****</div></pre></td></tr></table></figure></li><li><p>导出数据库为csv文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> passwd <span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'/tmp/tutorials.txt'</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span> <span class="keyword">ENCLOSED</span> <span class="keyword">BY</span> <span class="string">'"'</span></div><div class="line"><span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\r\n'</span>;</div></pre></td></tr></table></figure></li></ul><h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><ul><li>csv文件导入数据库  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/home/ubuntu//workspace/Lagou_Spider/lagou.txt'</span></div><div class="line"><span class="keyword">into</span> <span class="keyword">table</span> position_2</div><div class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span>  <span class="keyword">optionally</span> <span class="keyword">enclosed</span> <span class="keyword">by</span> <span class="string">'"'</span> <span class="keyword">escaped</span> <span class="keyword">by</span> <span class="string">'"'</span></div><div class="line"><span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</div></pre></td></tr></table></figure><ul><li>导入数据库sql文件<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p database_name &lt; dump.txt password *****</div></pre></td></tr></table></figure></li></ul><h2 id="其他常用命令和脚本"><a href="#其他常用命令和脚本" class="headerlink" title="其他常用命令和脚本"></a>其他常用命令和脚本</h2><ul><li><p>统计文件行数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wc -l file</div></pre></td></tr></table></figure></li><li><p>tmux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tmux new -s session</div><div class="line">tmux new -s session -d #在后台建立会话</div><div class="line">tmux ls #列出会话</div><div class="line">tmux attach -t session #进入某个会话</div></pre></td></tr></table></figure></li><li><p>合并文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">filenames = os.listdir(<span class="string">"./position_id_files/"</span>)</div><div class="line"><span class="keyword">with</span> open(<span class="string">'all_describe_to_one.txt'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f_write:</div><div class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</div><div class="line">        <span class="keyword">with</span> open(<span class="string">'./position_id_files/'</span>+filename,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f_read:</div><div class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f_read.readlines():</div><div class="line">                f_write.write(line)</div></pre></td></tr></table></figure></li><li><p>去重</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line">df = pd.read_csv(ready_to_read_file)</div><div class="line">df2=df.drop_duplicates(subset=[<span class="string">'positionId'</span>])</div><div class="line">df2.to_csv(ready_to_write_file)</div></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.jianshu.com/p/16cd37a5355f&gt;" target="_blank" rel="external">https://www.jianshu.com/p/16cd37a5355f&gt;</a><br><a href="https://www.zhihu.com/search?type=content&amp;q=%E6%8B%89%E5%8B%BE%20%E7%88%AC%E8%99%AB&gt;" target="_blank" rel="external">https://www.zhihu.com/search?type=content&amp;q=%E6%8B%89%E5%8B%BE%20%E7%88%AC%E8%99%AB&gt;</a><br><a href="https://www.w3cschool.cn/mysql/mysql-database-export.html" target="_blank" rel="external">https://www.w3cschool.cn/mysql/mysql-database-export.html</a><br><a href="http://blog.csdn.net/liuxuejiang158blog/article/details/31360765" target="_blank" rel="external">http://blog.csdn.net/liuxuejiang158blog/article/details/31360765</a><br><a href="http://blog.csdn.net/tiffany_li2015/article/details/50236833" target="_blank" rel="external">http://blog.csdn.net/tiffany_li2015/article/details/50236833</a><br><a href="http://sklearn.apachecn.org/cn/0.19.0/modules/feature_extraction.html" target="_blank" rel="external">http://sklearn.apachecn.org/cn/0.19.0/modules/feature_extraction.html</a><br><a href="http://www.cnblogs.com/qcloud1001/p/8444576.html" target="_blank" rel="external">http://www.cnblogs.com/qcloud1001/p/8444576.html</a>  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;拉勾网爬虫与数据挖掘&quot;&gt;&lt;a href=&quot;#拉勾网爬虫与数据挖掘&quot; class=&quot;headerlink&quot; title=&quot;拉勾网爬虫与数据挖掘&quot;&gt;&lt;/a&gt;拉勾网爬虫与数据挖掘&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>北京邮电大学-数据挖掘竞赛-2018</title>
    <link href="http://sunlanchang.github.io/2018/06/02/%E5%8C%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%AB%9E%E8%B5%9B-2018/"/>
    <id>http://sunlanchang.github.io/2018/06/02/北京邮电大学-数据挖掘竞赛-2018/</id>
    <published>2018-06-02T04:47:11.000Z</published>
    <updated>2018-06-24T07:55:08.667Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br>  <img src="https://www.tensorflow.org/images/tf_logo_transp.png"><br><br><br></div><h1 id="北京邮电大学-数据挖掘竞赛-2018"><a href="#北京邮电大学-数据挖掘竞赛-2018" class="headerlink" title="北京邮电大学-数据挖掘竞赛-2018"></a>北京邮电大学-数据挖掘竞赛-2018</h1><h1 id="description"><a href="#description" class="headerlink" title="description"></a>description</h1><p>本次比赛是由北京邮电大学、北京师范大学、中国农业大学在2018年5月21到5月27日联合举办，提供了脱敏后真实校园数据用于大赛分析，本次比赛旨在推进智慧校园中大数据分析和应用。</p><p>本次比赛采用TensorFlow框架的High Level Api中DNN Regresor，利用GPU加速TensorFlow计算，快速迭代模型。大体的思路如下文所示，代码解析详情见：<a href="https://github.com/sunlanchang/bupt_bigdata_2018/blob/master/bigdata_with_tensorflow.ipynb" target="_blank" rel="external">https://github.com/sunlanchang/bupt_bigdata_2018/blob/master/bigdata_with_tensorflow.ipynb</a></p><h1 id="框架流程图"><a href="#框架流程图" class="headerlink" title="框架流程图"></a>框架流程图</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/流程图.svg" alt="流程图" title="">                </div>                <div class="image-caption">流程图</div>            </figure><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><table><thead><tr><th>环境</th><th>版本</th><th>Python模块</th><th>版本</th></tr></thead><tbody><tr><td>Ubuntu</td><td>16.04</td><td>tensorflow</td><td>1.8</td></tr><tr><td>Anaconda</td><td>5.1</td><td>numpy</td></tr><tr><td>Python</td><td>3.6</td><td>pandas</td></tr><tr><td>Jupyter lab</td><td>0.31.5</td><td>matplotlib</td></tr></tbody></table><h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><ul><li>合并1到10月所有csv文件</li><li>构造训练数据集</li><li>对每一个地点的用户ID总数统计，构造标签列。</li></ul><blockquote><p>合并文件利用pandas读取每个文件，将每个文件赋值给一个DataFrame，最后利用<code>pd.concat()</code>合并成为一个DaraFrame写入文件。</p></blockquote><p>合并的文件如下图所示,共252014行：</p><table><thead><tr><th>地点</th><th>时间</th><th>人数</th></tr></thead><tbody><tr><td>12</td><td>2017-11-28 12</td><td>11878</td></tr><tr><td>12</td><td>2017-11-20 12</td><td>11171</td></tr><tr><td>12</td><td>2017-11-23 12</td><td>10740</td></tr><tr><td>12</td><td>2017-11-21 12</td><td>10069</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h1 id="提取特征"><a href="#提取特征" class="headerlink" title="提取特征"></a>提取特征</h1><ul><li>提取已有的基本的特征</li><li>手工构造特征</li><li>提取特征列利用pandas对时间特征的解析，分离出日、月、小时等特征列，</li></ul><table><thead><tr><th>特征列</th><th>building</th><th>cat</th><th>day</th><th>hour</th><th>is_weekend</th><th>loc_id</th><th>month</th><th>weekday</th></tr></thead><tbody><tr><td>特征列含义</td><td>建筑物编号</td><td>建筑物类别</td><td>日</td><td>小时</td><td>是否周末</td><td>地点ID</td><td>月</td><td>星期</td></tr></tbody></table><h1 id="选择模型"><a href="#选择模型" class="headerlink" title="选择模型"></a>选择模型</h1><p>采用<code>sklearn</code>和<code>tensorflow</code>模型多次训练模型，选择一个模型后优化模型。</p><ul><li>其中<code>tensorflow</code>采用<code>High Level APIs</code>中的<code>Estimator</code>，快速开发迭代模型取得了较为不错的结果，并且可以灵活的改变神经网络的架构，不需要修改大量的代码。</li></ul><h2 id="Linear-Regrassor"><a href="#Linear-Regrassor" class="headerlink" title="Linear Regrassor"></a>Linear Regrassor</h2><ul><li>根据月份将数据可视化后（如下图所示），发现使用线性模型并不适合数据的拟合，训练模型后RMSE值为1000左右也印证了这个结论。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/月份人数.png" alt="月份人数" title="">                </div>                <div class="image-caption">月份人数</div>            </figure><h2 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h2><ul><li>使用<code>sklearn.model_selection.train_test_split()</code>划分数据集为训练数据集和验证数据集，使用<code>sklearn.svm.SVC()</code>训练模型。</li><li>经过累计20小时的训练和预测数据，结果不是很好，RMSE值为800左右。</li><li>利用<code>sklearn</code>的模型有明显的缺点，训练速度太慢，不能快速迭代模型是一个足够放弃这个框架的理由。</li></ul><h2 id="DNN-Regrasor"><a href="#DNN-Regrasor" class="headerlink" title="DNN Regrasor"></a>DNN Regrasor</h2><ul><li>采用支持cuda加速并且CPU并行计算的TensorFlow框架让模型迭代的速度有了明显的提升。训练<code>batch_size</code>大小为1千万，训练100次也不过用时不到一个小时。</li><li>经过实际测试隐藏层为4层<code>[4096, 2048, 1024, 256]</code>的神经网络在GPU训练速度是CPU的30倍左右。</li></ul><h1 id="DNN超参选择"><a href="#DNN超参选择" class="headerlink" title="DNN超参选择"></a>DNN超参选择</h1><p>DNN架构方面尝试了多种不同的架构，利用Tensorboard查看收敛速度，得到一个相对较好的架构（如上所示）</p><ul><li>受限于GPU显存只有4G，如果隐藏层神经元超过1万，显存溢出，程序无法执行。</li><li>如果神经网络层数设计的太长同样会出现这个问题。</li><li>只用三层隐藏层的DNN，隐藏层神经元设计成<code>[2048,1024,512]</code>，通过<code>tensorboard</code>发现，神经网络收敛的非常快，并且准确率和多一层的架构相差不超过5%。如下图所示：</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/tensorboard.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>其余超参例如激活函数，学习率，优化算法等采用<code>tensorflow.estimator.DNNRegrasor()</code>默认参数。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">__init__(</div><div class="line">    hidden_units,</div><div class="line">    feature_columns,</div><div class="line">    model_dir=None,</div><div class="line">    label_dimension=1,</div><div class="line">    weight_column=None,</div><div class="line">    optimizer=&apos;Adagrad&apos;,</div><div class="line">    activation_fn=tf.nn.relu,</div><div class="line">    dropout=None,</div><div class="line">    input_layer_partitioner=None,</div><div class="line">    config=None,</div><div class="line">    warm_start_from=None,</div><div class="line">    loss_reduction=losses.Reduction.SUM</div><div class="line">)</div></pre></td></tr></table></figure></li></ul><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><ul><li>构建一个收入函数，对模型输入训练数据，训练数据有9/10做模型训练，1/10做模型的交叉验证，验证模型的准确率。</li><li>模型5000次迭代，20万条数据需要30分钟左右时间，根据<code>tensorboard</code> 查看收敛状态，调整神经网络架构。</li><li><code>tensorboard</code>还有待调研，特别是数据的分布等图表可以很好的了解数据本身，从而从数据出发构建模型，调整模型。</li></ul><h1 id="模型评测"><a href="#模型评测" class="headerlink" title="模型评测"></a>模型评测</h1><ul><li>构建输入函数，对训练后的模型输入交叉验证数据，做模型准确率的验证。</li><li>利用1/10的数据做交叉验证，对比多个模型的准确率，收敛时间，确定模型在局部得到一个最优解。</li></ul><h1 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h1><ul><li>构建输入函数，输入模型等待预测的数据，运行一次模型，模型迭代输出等待预测的数据，可以保存的字典或列表中。</li></ul><h1 id="其他常用linux命令"><a href="#其他常用linux命令" class="headerlink" title="其他常用linux命令"></a>其他常用linux命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tmux new-session -t $name 按照名字创建session</div><div class="line">tensorboard --logdir $your_path 开启tensorboard</div></pre></td></tr></table></figure><h1 id="For-more-information"><a href="#For-more-information" class="headerlink" title="For more information"></a>For more information</h1><blockquote><p><a href="https://tensorflow.google.cn/" target="_blank" rel="external">https://tensorflow.google.cn/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;center&quot;&gt;&lt;br&gt;  &lt;img src=&quot;https://www.tensorflow.org/images/tf_logo_transp.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;


&lt;h1 id=&quot;北京邮电大学-数据挖掘竞赛-2018&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ACM八大输入输出格式之Python版</title>
    <link href="http://sunlanchang.github.io/2018/01/21/ACM%E5%85%AB%E5%A4%A7%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E4%B9%8BPython%E7%89%88/"/>
    <id>http://sunlanchang.github.io/2018/01/21/ACM八大输入输出格式之Python版/</id>
    <published>2018-01-21T08:13:19.000Z</published>
    <updated>2018-01-21T08:15:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACM八大输入输出格式之Python版"><a href="#ACM八大输入输出格式之Python版" class="headerlink" title="ACM八大输入输出格式之Python版"></a>ACM八大输入输出格式之Python版</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#Python的输入是野生字符串，所以要自己转类型</span></div><div class="line"><span class="comment">#strip去掉左右两端的空白符，返回str</span></div><div class="line"><span class="comment">#slipt把字符串按空白符拆开，返回[str]</span></div><div class="line"><span class="comment">#map把list里面的值映射到指定类型，返回[type]</span></div><div class="line"></div><div class="line"><span class="comment">#EOF用抓异常</span></div><div class="line"></div><div class="line"><span class="comment">#print后面加逗号就不会换行，否则反之，当然3.x君自行传参</span></div><div class="line"></div><div class="line"><span class="comment">#题目细节没看太细，可能有的地方不对，不要在意这些细节啦</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 有多组输入数据，但没有具体的告诉你有多少组，只是让你对应每组输入，应该怎样输出。</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        a, b = map(int, raw_input().strip().split())</div><div class="line">        <span class="keyword">print</span> a + b,</div><div class="line">    <span class="keyword">except</span> EOFError:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    </div><div class="line"><span class="comment"># 输入一个整数，告诉我们接下来有多少组数据，然后在输入每组数据的具体值。</span></div><div class="line"></div><div class="line">tcase = int(raw_input().strip())</div><div class="line"><span class="keyword">for</span> case <span class="keyword">in</span> range(tcase):</div><div class="line">    a, b = map(int, raw_input().strip().split())</div><div class="line">    <span class="keyword">print</span> a + b,</div><div class="line">    </div><div class="line"><span class="comment"># 有多组输入数据，没有具体的告诉你有多少组,但是题目却告诉你遇见什么结束</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    a, b = map(int, raw_input().strip().split())</div><div class="line">    <span class="keyword">if</span> a == <span class="number">0</span> <span class="keyword">and</span> b == <span class="number">0</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> a + b,</div><div class="line">    </div><div class="line"><span class="comment"># 输入有多组，并却题目告诉你每组输入遇见什么结束，与第三种不同之处在于，每组输入都有相应的细化。</span></div><div class="line">    </div><div class="line">tcase = int(raw_input().strip())</div><div class="line"><span class="keyword">for</span> case <span class="keyword">in</span> range(tcase):</div><div class="line">    a, b = map(int, raw_input().strip().split())</div><div class="line">    <span class="keyword">if</span> a == <span class="number">0</span> <span class="keyword">and</span> b == <span class="number">0</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> a + b,</div><div class="line">    </div><div class="line"><span class="comment"># 这次的输入实现输入一个整数，告诉我们有多少行，在输入每一行。对于每一行的输入，有划分为第一个数和其他的数，第一个数代表那一组数据一共有多少输入。</span></div><div class="line"></div><div class="line">tcase = int(raw_input().strip())</div><div class="line"><span class="keyword">for</span> case <span class="keyword">in</span> range(tcase):</div><div class="line">    data = map(int, raw_input().strip().split())</div><div class="line">    n, array = data[<span class="number">0</span>], data[<span class="number">1</span>:]</div><div class="line">    </div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        sum += array[i]</div><div class="line">    <span class="keyword">print</span> sum,</div><div class="line">    </div><div class="line"><span class="comment"># 有多种输入数据，对于每组输入数据的第一个数代表该组数据接下来要输入数据量</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        data = map(int, raw_input().strip().split())</div><div class="line">        n, array = data[<span class="number">0</span>], data[<span class="number">1</span>:]</div><div class="line">            </div><div class="line">        sum = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">            sum += array[i]</div><div class="line">        <span class="keyword">print</span> sum,</div><div class="line">    <span class="keyword">except</span> EOFError:</div><div class="line">        <span class="keyword">raise</span></div><div class="line">    </div><div class="line"><span class="comment"># 这道题的输出只是简单的在每组输出后边多加一个换行而已！</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        a, b = map(int, raw_input().strip().split())</div><div class="line">        <span class="keyword">print</span> a + b</div><div class="line">    <span class="keyword">except</span> EOFError:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    </div><div class="line"><span class="comment"># 这种类型的输出注意的就是换行，这类题目说在输出样例中，每组样例之间有什么什么，所以我们在对应输出的同时要判断一下是否是最后一组输出，如果不是，就 将题目所说的东西输出（一般是换行或空格），如果是，就直接结束。</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    data = raw_input().strip()</div><div class="line">    <span class="keyword">if</span> data.isspace():</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        data = map(int, data)</div><div class="line">        n, array = data[<span class="number">0</span>], data[<span class="number">1</span>:]</div><div class="line">                </div><div class="line">        sum = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">            sum += array[i]</div><div class="line">        <span class="keyword">print</span> sum,</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ACM八大输入输出格式之Python版&quot;&gt;&lt;a href=&quot;#ACM八大输入输出格式之Python版&quot; class=&quot;headerlink&quot; title=&quot;ACM八大输入输出格式之Python版&quot;&gt;&lt;/a&gt;ACM八大输入输出格式之Python版&lt;/h1&gt;&lt;figu
      
    
    </summary>
    
      <category term="Other" scheme="http://sunlanchang.github.io/categories/Other/"/>
    
    
      <category term="Other" scheme="http://sunlanchang.github.io/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>传输层和应用层</title>
    <link href="http://sunlanchang.github.io/2017/12/28/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%92%8C%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>http://sunlanchang.github.io/2017/12/28/传输层和应用层/</id>
    <published>2017-12-28T08:43:06.000Z</published>
    <updated>2017-12-28T13:49:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p><strong>端口号分配方法</strong></p><p>占16位，地址范围0~65535，划分为3类：</p><ul><li>熟知的端口号或系统端口号（0~1023）。</li><li>注册端口（1024~49151）</li><li>动态端口（49152~65535）</li></ul><p><strong>UDP协议与TCP协议</strong></p><p><strong>UDP协议特点：</strong></p><ul><li>无连接的。发送数据前不需要建立连接，因此具有实时性。DNS、RIP等协议基于UDP协议。</li><li>面向报文的。不会对应用层产生的报文进行合并或分段处理，使得接收到的报文与发送的报文完全一致。</li><li>除了支持PPP（点对点通信）、还支持广播通信和多播通信。</li></ul><p>报文格式：| 源端口 | 目的端口 | 总长度 | 校验和 | UDP数据部分 |</p><p><strong>TCP协议特点：</strong></p><ul><li>面向连接。通信前建立连接，通信完成后释放连接。</li><li>提供可靠服务。UDP协议是不可靠的。</li><li>只支持点对点的通信，而UDP支持点对点，多对多，例如按组实现的多人通话就是使用UDP协议。</li><li>全双工通信。双方可以同时收发数据。</li><li>面向字节流，将应用层下来的数据看成一连串的字节流。</li></ul><p>报文格式有源端口、目的端口、序号、确认号、数据便宜标志位等</p><p><strong>TCP协议的流量控制（与链路层类似）：</strong></p><ul><li>TCP传输单位是报文，链路层传输单位是帧。</li><li>TCP采用滑动窗口机制，链路层流量控制的窗口大小固定。</li><li>TCP根据接收方的接收能力，通过接收窗口来实现端到端的流量控制，PPP链路层协议不使用确认机制和窗口机制。</li></ul><p><strong>TCP协议的拥塞控制4中算法</strong></p><ul><li>慢启动：指数增长</li><li>拥塞避免：线性方式增加。</li><li>快速重传和快速恢复：拥塞窗口重新设置为1，阈值减半。</li></ul><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p><strong>常见的应用层协议及其端口</strong><br>|服务进程|端口号|传输层协议|<br>| – | – | – |<br>|域名服务器|53|UDP|<br>|FTP数据|20|TCP|<br>|FTP控制|21|TCP|<br>|Telnet|23|TCP|<br>|SMTP|25|TCP|<br>|HTTP|80|TCP|<br>|POP|110|TCP|</p><p>PPP与P2P区别：PPP(Point to Point Protocol),点对点协议它是一种协议。P2P（peer-to-peer),点对点，对等技术，他是一种技术。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;传输层&quot;&gt;&lt;a href=&quot;#传输层&quot; class=&quot;headerlink&quot; title=&quot;传输层&quot;&gt;&lt;/a&gt;传输层&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;端口号分配方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;占16位，地址范围0~65535，划分为3类：&lt;/p&gt;
&lt;ul&gt;
&lt;
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>网络层</title>
    <link href="http://sunlanchang.github.io/2017/12/28/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>http://sunlanchang.github.io/2017/12/28/网络层/</id>
    <published>2017-12-28T08:13:14.000Z</published>
    <updated>2017-12-28T08:41:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p><strong>IP地址分类、子网划分、CIDR无分类编址</strong><br><a href="https://sunlanchang.github.io/2017/11/14/IP%E5%9C%B0%E5%9D%80%E3%80%81IP%E5%AD%90%E7%BD%91%E3%80%81CIDR/">IP地址分类方法</a></p><p><strong>Note</strong>：IP数据报的分片:注意数据部分是8的整数倍。</p><p><strong>RIP、OSPF路由选择协议</strong><br>RIP协议基本原理和特点<br><strong>原理</strong>：使用的距离向量算法要求每个路由器在路由表中列出到所有已知目的网络的最佳路由，并且定期把自己的路由表副本发送给与起直接连接的其他路由器。一条路径最多包含15个路由器，适用于小型互联网。<br><strong>基本特点</strong></p><ul><li>仅和自制系统内的相邻路由器交换信息。</li><li>支持两种信息交换方式，一种是定期的路由更新，另一种是触发的路由更新。</li><li>路由器交换的信息是自己现在的路由表。<br><strong>缺点</strong>  </li><li>最大距离15。</li><li>网络规模的扩大，交换的路由表的开销将增加。</li><li>路由迅速发生变化，路由表可能来不及交换信息。</li><li>选择最短路由，但是速度不一定是最快的路由。</li></ul><p>OSPF协议<br><strong>特点</strong></p><ul><li>使用分布式链路状态算法。</li><li>支持负载均衡，将距离、时延、带宽考虑进路由算法。</li><li>只有当链路状态发生变化时，才使用泛洪法向相邻的路由器发送信息更新路由表。</li></ul><p><strong>IPv6地址</strong><br>每个地址占128位，用冒号将每个十六位分隔开。有一下集中简写方法。</p><ul><li>前导零压缩法：如ABCD:0:0:0:0:A2:0</li><li>零压缩法：如ABCD:::::A2:0</li><li>十六进制冒号与十进制点分法结合：如0:0:0:0:0:0:128.12.1.2</li><li>前缀长度表示法（与CIDR类似）：ABAA::AA:0:FFFF/60</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络层&quot;&gt;&lt;a href=&quot;#网络层&quot; class=&quot;headerlink&quot; title=&quot;网络层&quot;&gt;&lt;/a&gt;网络层&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;IP地址分类、子网划分、CIDR无分类编址&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://sunlanc
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>物理层和数据链路层</title>
    <link href="http://sunlanchang.github.io/2017/12/28/%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>http://sunlanchang.github.io/2017/12/28/物理层和数据链路层/</id>
    <published>2017-12-28T06:47:01.000Z</published>
    <updated>2017-12-28T10:54:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p><strong>多路复用（Multiplexing）技术分类</strong></p><ul><li>频分多路复用（FDM）：通过不同的载波频率来划分若干个子信道，子信道之间互不干扰。</li><li>时分多路复用（TDM）：每一路信道只能在自己的时隙内独占信道传输。</li><li>波分多路复用（WDM）：与频分多路复用类似，他传输的是光信号，并按照光的波长区分信号。</li><li>码分多路复用（CDM）：每个用户使用经过特殊挑选的不同的码型通信，该技术有很强的抗干扰能力和安全性，广泛应用于移动通信和无线局域网中。</li></ul><p><strong>交换技术分类</strong></p><ul><li>线路交换：通过中间交换节点在两个站点之间建立一条专用的通信线路。</li><li>报文交换：将目的地址附到报文，网络节点根据报文上的地址信息，把报文发送到下一个节点，直到转送到目的节点。</li><li>分组交换：是报文交换的一种改进，分组的长度有一定的上限，提高了交换速度。包含虚电路分组交换和数据包分组交换。</li></ul><p><strong>数据编码技术</strong><br>包含模拟信号和数字信号两大类，主要讨论数字信号分类。</p><ul><li>非归零码：低电平表示0，高电平表示1。</li><li>曼彻斯特编码：由低到高电平表示1（上跳），由高到低点评表示0（下跳）。</li><li>查分曼彻斯特编码：前半个码元电平与上一个码元的后半个码元的电平相同为1，相反为0。</li></ul><p><strong>时延种类及其计算</strong><br>时延包括发送时延、传播时延、处理时延。</p><p>总时延 = 发送时延 + 传播时延 + 处理时延</p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p><strong>组帧技术分类、特点,掌握组帧的具体应用方法</strong></p><ul><li>字节统计法：帧头部有一个域指定该帧中字节数。</li><li>字符填充法：使用标志字节FLAG来标志帧的开头与结尾，并且使用ESC来转义特殊字符。</li><li>零比特填充发：用一组特定的比特（<code>0111110</code>）赖标志帧的开始和结束。</li></ul><p><strong>奇偶校验码的方法和特点</strong><br><a href="https://sunlanchang.github.io/2017/12/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95%E5%92%8C%E8%BF%90%E7%AE%97%E9%83%A8%E4%BB%B6/#%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C%E7%A0%81">参见计算机组成原理的奇偶校验</a></p><p><strong>CRC校验</strong><br><a href="https://sunlanchang.github.io/2017/10/26/CRC%E5%86%97%E4%BD%99%E7%A0%81/">CRC的计算</a></p><p><strong>滑动窗口技术、后退N帧ARQ协议和选择重传ARQ协议的工作原理</strong></p><ul><li>滑动窗口机制：网络中控制流量最常用的技术方案，发送发不必等待接收方的应答就可以连续发送数据帧，但对发送方在收到确认帧之前可以发送的数据帧的数目加以限制。</li><li>后退N帧ARQ协议：发送方可以连续发送多个数据帧而接收方只能按顺序接受指定序号的帧。</li><li>选择重传ARQ协议：接收方发现某帧出错后，将发送方正确的帧存放在缓冲区，要求发送方只重传出错的数据帧。</li></ul><p><strong>HDLC和PPP的特点</strong><br>HDLC基本特点  </p><ul><li>三种类型的站：1）主站负责控制链路操作。2）从站受控于主站。3）复合站具有主站和从站双重功能。</li><li>两种配置：1）平衡配置。2）非平衡配置</li><li>三种数据传送模式：1）正常相应模式。2）异步平衡模式。3）异步响应模式。</li></ul><p>PPP（点对点协议）  </p><ul><li>没有确认机制和流量控制功能</li><li>只支持点对点线路和全双工链路 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;物理层&quot;&gt;&lt;a href=&quot;#物理层&quot; class=&quot;headerlink&quot; title=&quot;物理层&quot;&gt;&lt;/a&gt;物理层&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;多路复用（Multiplexing）技术分类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;频分多路复用（FDM）：通
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络绪论和LAN（局域网）</title>
    <link href="http://sunlanchang.github.io/2017/12/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BB%AA%E8%AE%BA%E5%92%8CLAN%EF%BC%88%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%89/"/>
    <id>http://sunlanchang.github.io/2017/12/28/计算机网络绪论和LAN（局域网）/</id>
    <published>2017-12-28T02:37:17.000Z</published>
    <updated>2017-12-28T12:51:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p><strong>了解网络发展</strong></p><ul><li>面向终端的计算机网络</li><li>以通信子网为中心的计算机网络</li><li>体系结构标准化的网络</li><li>面向全球互连的计算机网络</li></ul><p><strong>网络拓扑结构分类</strong></p><ul><li>总线型结构</li><li>星型结构</li><li>环形结构</li><li>树形结构</li></ul><p><strong>网络协议 OSI 与 TCP/IP 的比较、协议各层的含义和基本传输单位</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/osi_tcpip.png" alt="OSI和TCP/IP区别" title="">                </div>                <div class="image-caption">OSI和TCP/IP区别</div>            </figure></p><ol><li>物理层PhysicalLayer:原始比特流的传输(传输基本单位比特bit)</li></ol><ul><li>提供传输数据的物理通路    </li><li>传输数据  </li><li>主要设备:中继器、集线器</li></ul><ol><li>数据链路层DataLinkLayer:建立相邻节点数据链路传输     (传输基本单位帧frame)</li></ol><ul><li>数据链路的建立、维护、拆除、指定拓扑结构并提供硬件寻址</li><li>数据组帧</li><li>控制帧的收发顺序</li><li>差错检测与恢复.流量控制</li><li>主要设备:二层交换机、网桥</li></ul><ol><li>网络层Network layer :基于IP地址的路由选路传输数据    (传输基本单位数据包packet)</li></ol><ul><li>路由选路</li><li>拥塞控制、差错检测与恢复</li><li>网络互联</li><li>主要设备:路由器</li></ul><ol><li>传输层Transport layer: 常规数据传递,面向连接或者无连接 (传输基本单位数据段segment)</li></ol><ul><li>流量控制</li></ul><ol><li><p>会话层Session layer: 建立会话关系</p></li><li><p>表示层Presentation layer:统一数据传输格式</p></li></ol><ul><li>数据压缩和解压</li><li>数据加密和解密</li></ul><ol><li>应用层Application layer :为用户应用程序提供服务接口</li></ol><h1 id="LAN"><a href="#LAN" class="headerlink" title="LAN"></a>LAN</h1><p><strong>常见 LAN 的拓扑结构类型及其特点分析</strong></p><ol><li>星形网的特点：</li></ol><ul><li>网络结构简单，便于管理（集中式）</li><li>处理机负载重（需处理所有的服务）</li><li>入网主机故障不影响整个网络的正常工作，中心处理机的故障将导致网络的瘫痪。</li></ul><ol><li>总线网的特点：</li></ol><ul><li>多台机器共用一条传输信道，信道利用率较高</li><li>同一时刻只能由两台计算机通信</li><li>某个结点的故障不影响网络的工作</li><li>网络的延伸距离有限，结点数有限</li></ul><ol><li>环形网特点：</li></ol><ul><li>实时性较好（信息在网中传输的最大时间固定）；</li><li>每个结点只与相邻两个结点有物理链路</li><li>传输控制机制比较简单</li><li>某个结点的故障将导致物理瘫痪</li><li>单个环网的结点数有限</li></ul><p><strong>LAN的扩展方法及其特点</strong></p><p><strong>交换机、路由器和集线器三者的应用比较</strong></p><ul><li>集线器和交换机区别：集线器采用的式共享带宽的工作方式，而交换机是独享带宽。</li><li>路由器与集线器交换机区别：路由器作用在于连接不同的网段并且找到网络中数据传输最合适的路径。<br>路由器与集线器交换机其他主要区别：</li><li>路由器工作在网络层，交换机和集线器工作在数据链路层和物理层。</li><li>路由器用IP地址转发数据，交换机利用MAC地址转发数据。</li><li>传统的交换机只能分割冲突域，不能分割广播域；而路由器可以分割广播域。</li><li>路由器可以提供防火墙功能。</li></ul><p><strong>VLAN 的实现技术</strong></p><ul><li>基于端口的VLAN</li><li>基于MAC地址的VLAN</li><li>基于第三层协议的VLAN</li><li>基于用户使用策略的VLAN</li></ul><p><strong>CSMA/CD（载波监听多路访问/冲突检测）</strong><br>含义：</p><ul><li>多路访问：许多计算机以多点接入的方式接入到总线网络。</li><li>载波监听：每个站在发送数据之前都要检测一下总线上是否有其它计算机在发送数据。</li><li>冲突检测：当几个站同时发送数据，总线上的信号电压摆动值将会增大（相互叠加）。发现冲突停止发送数据，等待一段随机时间再次发送。</li></ul><p>原理：先听后发，边听边发，冲突停发，随机重发。</p><p>特点：在发送数据时，需要不断的检测信道是否有其他主机也在发送数据。</p><p><strong>CSMA/CA（载波监听多路访问/冲突避免）</strong></p><p>原理：利用ACk信号来避免冲突的发生，也就是说，只有当客户端收到网络上返回的ACK信号后，才确认送出的数据已经正确到达目的。</p><p>CSMA/CD与CSMA/CA区别：  </p><ul><li>前者用于总线式以太网，后者用于无线网路</li><li>检测信道空闲方式不同：前者通过检测电缆中电压的变化，后者利用能量检测（ED）、载波检测（CS）、能量载波混合检测</li><li>对于无线局域网（WLAN）中某个节点来说来说，信号会出现覆盖的情况</li></ul><p><strong>基于逆向学习算法,掌握透明网桥转发表的生成过程</strong></p><p>透明指的是局域网上的站点并不知道所发送的帧经过那几个网桥，因为网桥对各站来说是看不见的。透明网桥是一种即插即用设备。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;了解网络发展&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向终端的计算机网络&lt;/li&gt;
&lt;li&gt;以通信子网为中心的计算机网
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络部分题目</title>
    <link href="http://sunlanchang.github.io/2017/12/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <id>http://sunlanchang.github.io/2017/12/27/计算机网络部分题目/</id>
    <published>2017-12-27T05:03:43.000Z</published>
    <updated>2017-12-28T11:18:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h1><ol><li><p>TCP/IP和OSI模型比较，有哪些相同或不同之处？请分别给出两个方面。<br> <strong>解答</strong>：1）相同点：都是层次化模型；都有应用层、传输层、网络层。2）不同点：OSI模型分为7层具有网络协议理论指导价值，但未得到应用。TCP/IP模型分为4层得到了应用。</p></li><li><p>简要叙述虚拟局域网的划分技术。<br> <strong>解答</strong>：1）按交换机端口划分。2）按IP地址划分。3）按MAC地址划分。4）按用户策略划分</p></li><li>常见的局域网络扩展方法有哪几种？各有什么特点？<br> <strong>解答</strong>：主要有三种。<ul><li>采用集线器，工作于物理层，具有冲突域和广播域，每台主机的带宽减少，总带宽不变。  </li><li>采用网桥或交换机，工作于数据链路层，具有广播域，隔离了冲突域，有广播风暴的风险。每台主机带宽不变，总带宽增加。</li><li>采用路由器，工作于网络层，隔离了广播域和冲突域，不会产生广播风暴，每台主机带宽不变，总带宽增加。</li></ul></li><li>按发展历史，防火墙技术有哪四种类型？请说明每类型的特点<br> <strong>解答</strong>：<ul><li>第一代防火墙：采用路由器，实现包过滤功能。</li><li>第二代防火墙：采用代理技术，提供网络服务级的控制，易于配置但速度较慢。</li><li>第三代防火墙：也叫状态监控功能的防火墙，可以对每一层数据进行检测和监控。</li><li>第四代防火墙：属于全方位的安全技术集成系统，采用安全内核、代理系统、多级过滤、安全服务器、鉴别和加密等关键技术。</li></ul></li></ol><h1 id="计算题"><a href="#计算题" class="headerlink" title="计算题"></a>计算题</h1><ol><li>考虑如图子网，有留个路由器。下面的矢量刚刚到达路由C：来自B的矢量为（5，0，8，12，6，2）（注：该矢量表示B到所有路由节点A，B，C，D，E，F的延迟分别为5，0，8，12，6，2一下同理）；来自D的矢量为（16,12,6,0,9,10）；来自E的矢量为（7,6,3,9,0,4）。经测量C到B、D和E的延迟分别为6、3、5。请使用距离矢量路由算法，按照下表格式，填写路由表C将要使用的输出线路以及期望的延迟。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/luyou.jpg" alt="路由图" title="">                </div>                <div class="image-caption">路由图</div>            </figure><table><thead><tr><th>节点号</th><th>延迟</th><th>输出线路</th></tr></thead><tbody><tr><td>A</td><td></td><td></td></tr><tr><td>B</td><td></td><td></td></tr><tr><td>C</td><td></td></tr></tbody></table><ol><li>一IP数据包的数据部分为4800字节（使用固定首部），需要分片为长度不超过1500字节的分组。请按照一下内容，给出具体的分片设计结果。<br> <strong>解答</strong>：本题没有唯一答案，首要保证每一分片数据是8的整数倍，而且分片数量以最少为佳。如果最后一片未能达到要求，则可以由系统或用户补0直到满足要求。其中的一种分片可以是：</li></ol><table><thead><tr><th>数据报片序号</th><th>数据长度</th><th>分组长度</th></tr></thead><tbody><tr><td>原始数据报</td><td>4800</td><td>4820</td></tr><tr><td>数据报片1</td><td>1480</td><td>1500</td></tr><tr><td>数据报片2</td><td>1480</td><td>1500</td></tr><tr><td>数据报片3</td><td>1480</td><td>1500</td></tr><tr><td>数据报片4</td><td>360</td><td>380</td></tr></tbody></table><ol><li>请在下图中直接画出数据<code>01011011001</code>的非归零码、曼彻斯特编码和差分曼彻斯特编码三种编码方式的信号波形。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/bianma.jpg" alt="编码" title="">                </div>                <div class="image-caption">编码</div>            </figure><ol><li><p>在RSA密钥密码体制中，如果p=13,q=31,d=7,求c的值。给出具体求解过程。<br><strong>解答</strong>：$n=p<em>q=13</em>31=403$，$z=(p-1)(q-1)=12<em>30=360$，$c</em>d=1mod360$ ，已知$d=7$，可以求$c=103$。</p></li><li><p>设TCP的拥塞窗口的慢启动阈值为16（单位为报文段），当拥塞窗口上升到24时，网络发生超时，TCP开始慢启动和拥塞避免。要求：1）画出拥塞控制示意图，要求描述清晰，有明确的坐标信息。2）求第18次传输时拥塞窗口大小是多少？<br><strong>解答</strong>：<br>1）当窗口为24时，实行拥塞控制避免，则新的阈值为24/2=12.拥塞控制示意图：<br><img src="/images/yongsekongzhi.jpg" alt="拥塞控制"><br>1)12；</p></li></ol><h1 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h1><ol><li>现在有一个公司需要创建企业网络，申请到的网络地址为<code>198.97.6.0</code>，该公司包括系统集成部、软件部、工程部和办公室4个部门，分别有28、21、14和8台计算机。为了便于开展工作，需要将这些部门划分子网管理。<br>1）如何划分子网？给出具体过程和子网掩码。（子网号全0或全1不考虑）<br>2）确定各个部门的网络地址，并写出分配给各个部门网络中的主机IP地址范围。<br><strong>解答</strong>：<br>1）采用子网划分的方法对该公司的网络进行划分。由于该公司包括4个部门，共需要划分4个子网。已知网络地址<code>198.97.6.0</code>是一个C类地址各部门的主机最多为28/由于子网号和主机号不允许是全0或全1,因此子网号的比特数为3即最多有$2^3-2=6$，个可分配的子网，主机号的比特数为5即每个子网最多有$2^5-2=30$个可分配的IP地址，因此子网掩码为<code>255.255.255.224</code>。<br>2）可用的6个子网的网络地址分别是：<code>198.97.6.32</code>、<code>198.97.6.64</code>、<code>198.97.6.96</code>、<code>198.97.6.128</code>、<code>198.97.6.160</code>、<code>198.97.6.192</code>，若选择前面4个，则有：<br>子网<code>198.97.6.32</code>的主机IP范围为：<code>198.97.6.33~198.97.6.62</code><br>子网<code>198.97.6.64</code>的主机IP范围为：<code>198.97.6.65~198.97.6.94</code><br>子网<code>198.97.6.96</code>的主机IP范围为：<code>198.97.6.97~198.97.6.126</code><br>子网<code>198.97.6.128</code>的主机IP范围为：<code>198.97.6.129~198.97.6.158</code>  </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简答题&quot;&gt;&lt;a href=&quot;#简答题&quot; class=&quot;headerlink&quot; title=&quot;简答题&quot;&gt;&lt;/a&gt;简答题&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;TCP/IP和OSI模型比较，有哪些相同或不同之处？请分别给出两个方面。&lt;br&gt; &lt;strong&gt;解答&lt;/stro
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>事务与并发控制、存储过程和触发器</title>
    <link href="http://sunlanchang.github.io/2017/12/23/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E3%80%81%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>http://sunlanchang.github.io/2017/12/23/事务与并发控制、存储过程和触发器/</id>
    <published>2017-12-23T03:08:42.000Z</published>
    <updated>2017-12-24T04:43:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p><strong>4个基本特征(ACID)：</strong></p><ol><li>原子性(atomicity)：事务是数据库的逻辑工作单位，事务中的操作要么都做，要么都不做。</li><li>一致性(consistency)：事务中的操作如果有一部分成功，一部分失败，为避免数据库产生不一致状态，系统会自动将事务中已完成的操作撤销，是数据库回到事务开始前的状态。因此事务的一致性和原子性是密切相关的。</li><li>隔离性(isolation)：一个事务的内部操作及使用的数据对其他事务是隔离的，并发执行的各个事务不能相互干扰。</li><li>持久性(durability)：事务一旦体骄傲，则其对数据库中的数据的改变就是永久的，以后的操作或故障不会对事务的操作结果擦好女生任何影响。</li></ol><p><strong>2种类型</strong></p><ol><li>隐式事务：每一条数据操作语句都是一个事务（例如一条select语句）。</li><li>显式事务:有显式的开始和结束标记的事务。</li></ol><p><strong>并发控制措施</strong></p><ol><li>共享锁（只允许读）：对于读操作来说，可以有多个事务同时获得一个数据的共享锁，但阻止其他事务对该数据进行排他锁。</li><li>排他锁（只允许读、写）：一旦一个事务获得对某一数据的排他锁，就不允许其他事务对该数据进行任何封锁。</li></ol><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p><strong>创建和执行存储过程</strong></p><p>例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> proc pname</div><div class="line">    @sname <span class="built_in">char</span>(<span class="number">20</span>)</div><div class="line"><span class="keyword">as</span></div><div class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname=@sname;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;4个基本特征(ACID)：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原子性(atomicity)：事务是数据库的逻辑工作
      
    
    </summary>
    
      <category term="数据库原理与应用" scheme="http://sunlanchang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="数据库原理与应用" scheme="http://sunlanchang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据库概述和结构、数据模型、关系数据库</title>
    <link href="http://sunlanchang.github.io/2017/12/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0%E5%92%8C%E7%BB%93%E6%9E%84%E3%80%81%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    <id>http://sunlanchang.github.io/2017/12/22/数据库概述和结构、数据模型/</id>
    <published>2017-12-22T13:06:34.000Z</published>
    <updated>2017-12-23T03:09:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库概览"><a href="#数据库概览" class="headerlink" title="数据库概览"></a>数据库概览</h1><p><strong>数据库系统</strong>本质是一个用计算机存储数据的系统，数据库是收集数据文件的仓库或容器，有永久存储、有组织和可共享的基本特点。<br>数据库管理相对于文件管理的优点：  </p><ol><li>数据相互关联</li><li>较少的数据冗余</li><li>程序与数据相互独立</li><li>保证数据的安全可靠</li><li>最大限度保证数据的正确性</li><li>数据可以共享并能保证数据的一致性</li></ol><h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><p><strong>数据模型及其分类</strong></p><ol><li>实体联系模型：涉及实体、属性、联系三方面（使用E-R图表示）。  </li><li>层次数据模型：用树形结构表示实体和实体之间的联系（有父节点和子节点）。</li><li>网状数据模型：用图形结构表示实体和实体之间的联系（可以没有父节点）。</li><li>关系数据模型：用关系表示实体和实体之间的联系。 </li></ol><p><strong>数据库模式结构</strong>：三级模式结构，由外向内是：外模式、模式、内模式</p><h2 id="关系模型的组成"><a href="#关系模型的组成" class="headerlink" title="关系模型的组成"></a>关系模型的组成</h2><p>关系数据结构：用二维表来组织数据，这个二维表在关系数据库中就称为关系。</p><p>关系操作  </p><ol><li>传统的关系运算：并、交、差、广义笛卡尔积</li><li>专门的关系运算：选择、投影、连接、除</li><li>有关的数据操作：查询、插入、删除、修改</li></ol><ul><li>实体完整性和参照完整性：系统级的约束，是必须满足的完整性约束。</li><li>用户自定义的完整性：应用级的约束，限制数据的取值范围等。</li></ul><ol><li>实体完整性：关系数据库中所有的表都必须有主码，而且表中不允许存在（1）无主码的记录（2）主码相同的记录</li><li>参照完整性：一个表中的关系的取值受到另一个表中关系的取值范围的约束（例如外码的选取）。</li><li>用户定义的完整性：一般是数据的取值范围的约束。</li></ol><p>关系代数及其应用  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库概览&quot;&gt;&lt;a href=&quot;#数据库概览&quot; class=&quot;headerlink&quot; title=&quot;数据库概览&quot;&gt;&lt;/a&gt;数据库概览&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;数据库系统&lt;/strong&gt;本质是一个用计算机存储数据的系统，数据库是收集数据文件的仓库或容器，有永
      
    
    </summary>
    
      <category term="数据库原理与应用" scheme="http://sunlanchang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="数据库原理与应用" scheme="http://sunlanchang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>关系数据库规范化理论</title>
    <link href="http://sunlanchang.github.io/2017/12/18/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83%E5%8C%96%E7%90%86%E8%AE%BA/"/>
    <id>http://sunlanchang.github.io/2017/12/18/关系数据库规范化理论/</id>
    <published>2017-12-18T12:17:51.000Z</published>
    <updated>2017-12-18T13:35:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p><strong>函数依赖</strong>：如何构造一个合适的关系模式，应该构造几个关系模式，每个关系模式由哪些属性组成等，都是数据库的逻辑设计问题，其中各个属性之间的依赖关系就是函数依赖。<br>例如：选课表中$(Sno, Cno) \rightarrow Grade$即成绩依赖与学生学号和课程号，或Sno和Cno决定Y。  </p><p>设有关系模式R(A1,A2,…)，X和Y为R的一个子集，则：  </p><ol><li>如果$X \rightarrow Y$，但Y不包含于X，则称$X \rightarrow Y$是<strong>非平凡的函数依赖</strong>。</li><li>如果X不函数依赖与Y则记做$X \nrightarrow Y$。</li><li>如果$X \rightarrow Y$，则成为X为<strong>决定因子</strong>。</li><li>如果$X \rightarrow Y$并且$Y \rightarrow X$，则记做$X \leftrightarrow Y$。</li><li>如果$X \rightarrow Y$，并且对于X的每一个子集X1都有$X1 \nrightarrow Y$，则称<strong>Y完全依赖于X</strong>，若存在$X1 \rightarrow Y$反之为<strong>Y部分依赖于X</strong>。  </li><li>如果$X \rightarrow Y$（即非平凡函数依赖$Y \nrightarrow X$）并且$Y \rightarrow Z$ ，则称Z传递依赖与X。  </li></ol><p>设U表示关系模式E的属性全集，F表示R上的函数依赖集，则关系模式R可表示为R(U, F)  </p><ol><li><strong>候选码</strong>如果K为R中的属性或属性组，且K完全依赖于U，则K为R的候选码即K为决定R全部属性的最小属性组。  </li><li>关系R(u, F)中可能有多个候选码，选其中一个作为<strong>主码</strong>。  </li><li><strong>全码</strong>：候选码为整个属性组。  </li><li><strong>主属性</strong>为包含在任一候选码中的属性，反之为<strong>非主属性</strong>。  </li><li>用于建立关系表之间关联关系的属性称为<strong>外码</strong>。  </li></ol><h1 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h1><p><strong>第一范式</strong><br>不包含重复组属性（即不包含非原子项的属性）是第一范式的关系。<br><strong>第二范式</strong><br>如果R满足第一范式，并且R中每个非主属性都完全依赖于主码则R满足第二范式。（所有的属性都完全依赖主码，消除非主属性部的部分依赖）  </p><p>例如：$SC(Sno, Cno, Sname, Grade)$中$(Sno, Cno)$是主码，而又有$Sno \rightarrow Sname$，因此$Sname$部分依赖于$(Sno, Cno)$。</p><p>模式分解：  </p><ol><li>用组成主码的属性集合的每一个子集作为主码构成一个关系模式。</li><li>将依赖于这些主码的属性放置到相应的关系模式中。</li><li>最后去掉只由主码的子集构成的关系模式。</li></ol><p><strong>第三范式</strong><br>R(U, F)满足第二范式，并且不存在传递依赖。  </p><p>模式分解：</p><ol><li>对于不是候选码的每个决定因子，总关系模式中删去依赖于它的所有属性。</li><li>新建一个关系模式，新关系模式中包含在原关系模式中所有依赖于该决定因子的属性。</li><li>将决定因子作为新关系模式的主码。</li></ol><p><strong>BC范式</strong><br>当且仅当关系中的每个函数依赖的决定因子都是候选码时，R满足BC范式。<br>与第三范式区别：对于函数依赖$A \rightarrow B$，3NF允许B是主属性而A不是候选码，BCNF要求A必须是候选码。  </p><p><strong>关系模式的分解准则</strong><br>模式分解要满足：</p><ul><li>模式分解具有无损连接性；</li><li>模式分解能够保持函数依赖。</li></ul><ol><li><strong>无损连接</strong>是指分解后的关系通过自然连接可以恢复成原来的关系，即通过自然连接得到的关系与原来的关系相比，既不多出信息、又不丢失信息。</li><li><strong>保持函数依赖分解</strong>是指在模式的分解过程中，函数依赖不能丢失的特性，即模式分解不能破坏原来的语义。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;函数依赖&lt;/strong&gt;：如何构造一个合适的关系模式，应该构造几个关系模式，每个关系模式由哪些属性组成等，
      
    
    </summary>
    
      <category term="数据库原理与应用" scheme="http://sunlanchang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="数据库原理与应用" scheme="http://sunlanchang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>设置ssh私钥登录</title>
    <link href="http://sunlanchang.github.io/2017/12/16/%E8%AE%BE%E7%BD%AEssh%E7%A7%81%E9%92%A5%E7%99%BB%E5%BD%95/"/>
    <id>http://sunlanchang.github.io/2017/12/16/设置ssh私钥登录/</id>
    <published>2017-12-16T06:10:09.000Z</published>
    <updated>2017-12-16T06:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h1><p><code>sudo apt install ssh</code>，若安装了，忽略这一步。</p><h1 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h1><p>主机A：10.0.5.199<br>主机B：10.0.5.198<br>需要配置主机A无密码登录主机B<br>先确保所有主机的防火墙处于关闭状态，这里是开放22端口。<br>在主机A上执行如下：<br>　1.　<code>$cd ~/.ssh</code><br>　2.　<code>$ssh-keygen -t rsa</code>，然后一直按回车键，就会按照默认的选项将生成的密钥保存在<code>.ssh/id_rsa</code>文件中。<br>　3.　<code>$cp id_rsa.pub authorized_keys</code> 这步完成后，正常情况下就可以无密码登录本机了，即ssh localhost，无需输入密码。<br>　4.　<code>$scp authorized_keys summer@10.0.5.198:/home/summer/.ssh</code>，把刚刚产生的authorized_keys文件拷一份到主机B上.　　<br>　5.　<code>$chmod 600 authorized_keys</code>，进入主机B的.ssh目录，改变authorized_keys文件的许可权限。  </p><p><strong>Note：</strong><br>(4和5可以合成一步，执行:  <code>$ssh-copy-id -i summer@10.0.5.198</code>)</p><p><strong>参考</strong>  </p><blockquote><p><a href="http://www.cnblogs.com/jdksummer/articles/2521550.html" target="_blank" rel="external">http://www.cnblogs.com/jdksummer/articles/2521550.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装ssh&quot;&gt;&lt;a href=&quot;#安装ssh&quot; class=&quot;headerlink&quot; title=&quot;安装ssh&quot;&gt;&lt;/a&gt;安装ssh&lt;/h1&gt;&lt;p&gt;&lt;code&gt;sudo apt install ssh&lt;/code&gt;，若安装了，忽略这一步。&lt;/p&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
      <category term="Other" scheme="http://sunlanchang.github.io/categories/Other/"/>
    
    
      <category term="Other" scheme="http://sunlanchang.github.io/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>HTTP、TCP/IP协议、socket的区别</title>
    <link href="http://sunlanchang.github.io/2017/12/15/HTTP%E3%80%81TCP-IP%E5%8D%8F%E8%AE%AE%E3%80%81socket%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://sunlanchang.github.io/2017/12/15/HTTP、TCP-IP协议、socket的区别/</id>
    <published>2017-12-15T14:36:51.000Z</published>
    <updated>2017-12-15T14:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在配置Shadowsocks客户端遇到了<code>Socket</code>接口的问题，特地查阅了一下TCP/IP协议层的<code>Socket</code>，总的来说它是TCP/IP的一个抽象的接口。</p><h1 id="TCP-IP连接"><a href="#TCP-IP连接" class="headerlink" title="TCP/IP连接"></a>TCP/IP连接</h1><p>手机能够使用联网功能是因为手机底层实现了TCP/IP协议，可以使手机终端通过无线网络建立TCP连接。TCP协议可以对上层网络提供接口，使上层网络数据的传输建立在“无差别”的网络之上。<br><strong>建立起一个TCP连接需要经过“三次握手”：</strong>  </p><ul><li>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；</li><li>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li><li>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。<br>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”（过程就不细写了，就是服务器和客户端交互，最终确定断开。<h1 id="HTTP连接"><a href="#HTTP连接" class="headerlink" title="HTTP连接"></a>HTTP连接</h1>HTTP协议即超文本传送协议(Hypertext Transfer Protocol )，是Web联网的基础，也是手机联网常用的协议之一。<br><strong>HTTP协议是建立在TCP协议之上的一种应用。</strong><br>HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。</li><li>在HTTP 1.0中，客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。</li><li>在HTTP 1.1中则可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。<br>由于HTTP在每次请求结束后都会主动释放连接，因此HTTP连接是一种“短连接”，要保持客户端程序的在线状态，需要不断地向服务器发起连接请求。通常的做法是即时不需要获得任何数据，客户端也保持每隔一段固定的时间向服务器发送一次“保持连接”的请求，服务器在收到该请求后对客户端进行回复，表明知道客户端“在线”。若服务器长时间无法收到客户端的请求，则认为客户端“下线”，若客户端长时间无法收到服务器的回复，则认为网络已经断开。<h1 id="SOCKET原理"><a href="#SOCKET原理" class="headerlink" title="SOCKET原理"></a>SOCKET原理</h1><strong>套接字（socket）概念</strong><br>套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。<br>应用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个 TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应用层可以和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。<br><strong>建立socket连接</strong><br>建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket ，另一个运行于服务器端，称为ServerSocket 。<br>套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。</li><li>服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</li><li>客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</li><li>连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。<h1 id="SOCKET连接与TCP-IP连接"><a href="#SOCKET连接与TCP-IP连接" class="headerlink" title="SOCKET连接与TCP/IP连接"></a>SOCKET连接与TCP/IP连接</h1>创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。<br>socket则是对TCP/IP协议的封装和应用（程序员层面上）。也可以说，TPC/IP协议是传输层协议，主要解决数据 如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：  <blockquote><p>“我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如 果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、FTP、TELNET等，也 可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。”  </p></blockquote></li></ul><p>我们平时说的最多的socket是什么呢，实际上socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。 实际上，Socket跟TCP/IP协议没有必然的联系。Socket编程接口在设计的时候，就希望也能适应其他的网络协议。所以说，Socket的出现 只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口，比如create、 listen、connect、accept、send、read和write等等。网络有一段关于socket和TCP/IP协议关系的说法比较容易理解：<br>“TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。这个就像操作系统会提供标准的编程接口，比如win32编程接口一样，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。”<br>实际上，传输层的TCP是基于网络层的IP协议的，而应用层的HTTP协议又是基于传输层的TCP协议的，而Socket本身不算是协议，就像上面所说，它只是提供了一个针对TCP或者UDP编程的接口。socket是对端口通信开发的工具,它要更底层一些.</p><h1 id="Socket连接与HTTP连接"><a href="#Socket连接与HTTP连接" class="headerlink" title="Socket连接与HTTP连接"></a>Socket连接与HTTP连接</h1><p>由于通常情况下Socket连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致 Socket 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。<br> 而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。<br>很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是Socket连接，服务器就可以直接将数据传送给客户端；若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。<br>http协议是应用层的协义 有个比较形象的描述：HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力。<br><strong>参考：</strong>  </p><blockquote><p><a href="https://baike.baidu.com/item/socket/281150" target="_blank" rel="external">https://baike.baidu.com/item/socket/281150</a><br><a href="https://www.2cto.com/net/201211/166537.html" target="_blank" rel="external">https://www.2cto.com/net/201211/166537.html</a><br><a href="http://jingyan.baidu.com/article/08b6a591e07ecc14a80922f1.html" target="_blank" rel="external">http://jingyan.baidu.com/article/08b6a591e07ecc14a80922f1.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在配置Shadowsocks客户端遇到了&lt;code&gt;Socket&lt;/code&gt;接口的问题，特地查阅了一下TCP/IP协议层的&lt;code&gt;Socket&lt;/code&gt;，总的来说它是TCP/IP的一个抽象的接口。&lt;/p&gt;
&lt;h1 id=&quot;TCP-IP连接&quot;&gt;&lt;a href=&quot;#T
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://sunlanchang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>存储系统</title>
    <link href="http://sunlanchang.github.io/2017/12/14/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
    <id>http://sunlanchang.github.io/2017/12/14/存储系统/</id>
    <published>2017-12-14T12:58:55.000Z</published>
    <updated>2017-12-22T14:58:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三层体系结构的特点"><a href="#三层体系结构的特点" class="headerlink" title="三层体系结构的特点"></a>三层体系结构的特点</h1><p>三层体系结构依次是：Cache、主存、辅存。  </p><ul><li>cache-主存:在CPU和主存之间增加一级速度快、但容量较小且每位价格较高的高速缓冲存储Cache)。借助于辅助软硬件，它与主存构成一个有机的整体，以弥补主存速度的不足。这个层次的工作主要由硬件实现。  </li><li>主存-辅存:这个层次的目的是为了弥补主存容量的它是在主存外面增加一个容量更大、每位价格更速度更慢的存储器(称为辅存，一般是硬盘)。它辅助软硬件的作用，构成一个整体。“主存-辅存常被用来实现虚拟存储器，向编程人员提供大量空间。<h1 id="Cache的特点、作用、工作原理"><a href="#Cache的特点、作用、工作原理" class="headerlink" title="Cache的特点、作用、工作原理"></a>Cache的特点、作用、工作原理</h1></li></ul><ol><li>特点是速度快</li><li>作用：弥补CPU与主存之间的运行速度的差距。</li><li>工作原理：根据数据分布的局部性和时间局部性在CPU和主存之间设置Cache。 <h1 id="虚拟存储器的特点、工作原理、管理方式"><a href="#虚拟存储器的特点、工作原理、管理方式" class="headerlink" title="虚拟存储器的特点、工作原理、管理方式"></a>虚拟存储器的特点、工作原理、管理方式</h1>虚拟存储器指的是“主存-辅存”层次。<br>虚拟存储器的作用：<br>虚拟存储器，Virtual Machine，简称VM，是对主存（DRAM）的一种抽象，是计算机系统中最重要的概念之一。计算机中有各种存储器，而VM的存在，就是为了帮助我们有效地管理这些存储器，减少错误，提供一种简单的数据交互方法。VM，将主存看成是一个存储在磁盘上的地址空间的高速缓存，在主存中只保存活动区域，并根据需要在磁盘和主存中来回传送数据，而且为每个进程提供了一致的地址空间，并保护这个地址空间不被其它的进程破坏</li></ol><p><strong>段式</strong>  </p><ol><li>段式存储是根据程序逻辑，给程序分段。使得每段大小不同。这种虚拟地址划分方法适合程序设计</li><li>段式存储的虚拟地址由段号和段内偏移地址组成。段式虚拟存储器到物理地址的映射通过段表实现</li><li>段式虚拟存储会造成空页</li></ol><p><strong>页式</strong>  </p><ol><li>概念<ol><li>程序员在比实际主存大得多的逻辑地址空间中编写程序</li><li>程序执行时，把当前需要的程序段和数据块掉入主存，其他暂不使用的放在磁盘上</li><li>执行指令时，通过硬件将逻辑地址转化为物理地址。虚拟地址高位为虚页号，低位为页内偏移地址</li><li>当程序发生数据访问或程序访问失效(缺页时)，由操作系统把信息从磁盘调入主存中</li></ol></li><li>分页  <ol><li>基本思想：内存被分成固定长度且长度较小的存储块（页框，实页，物理页），每个进程也被划分为固定长度的程序块（页，虚页，逻辑页），通过页表，实现逻辑地址想物理地址转化</li><li>逻辑地址：程序中指令所使用的地址（进程所在地址空间）</li><li>物理地址：存放指令或数据的实际内存地址</li></ol></li><li>页表结构<br>页表的首地址放在基址寄存器。采用基址寻址方式<br>每个页表项前面有一个虚页号：从0开始递增的序号。页表项又分为几个结构：<br>（1）装入位：该页是否在内存中<br>（2）修改位：该也在内存中是否被修改<br>（3）替换控制位：用于clock算法<br>（4）其他<br>（5）实页号（8进制）<br><strong>段页式</strong>  </li><li>段页式虚拟存储，先把程序按照逻辑分成段，再把每段分成固定大小的页。<br>程序对主存的调入调出是按照页面进行的。但他有可以根据段实现共享和保护。</li><li>缺点是段页式虚拟地址转换成物理地址需要查询2个表：段表和页表。段表找到相应页表的位置，页表找到想也页的位置。</li><li>段页式细腻地址的结构可以为以下形式：<br>程序地址： <code>用户号(进程pid) | 段号 | 页号 | 页内偏移地址</code><h1 id="Cache的地址映像"><a href="#Cache的地址映像" class="headerlink" title="Cache的地址映像"></a>Cache的地址映像</h1><strong>直接映像</strong><br>j= i mod Cache的块数<br>把主存分成若干区，每区与Cache大小相同。区内分块，主存每个区中块的大小和Cache中块的大小相等，主存中每个区包含的块的个数与Cache中块的个数相等。任意一个主存块只能映像到Cache中唯一指定的块中，即相同块号的位置。主存地址分为三部分：区号、块号和块内地址，Cache地址分为：块号和块内地址。直接映像方式下，数据块只能映像到Cache中唯一指定的位置，故不存在替换算法的问题。它不同于全相连Cache，地址仅需比较一次。<br>特点：地址变换简单、速度快，可直接由主存地址提取出Cache地址。但不灵活，块冲突率较高，Cache空间得不到充分利用。<br>公式：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">主存地址位数 ＝ 区号 + 区内分块号 + 块内地址</div><div class="line">Cache地址位数 ＝ 块号+块内地址</div></pre></td></tr></table></figure></li></ol><p><strong>全相联映像</strong><br>计算主存地址的各字段的位数、命中率。<br>主存中任何一个块均可以映像装入到Cache中的任何一个块的位置上。主存地址分为块号和块内地址两部分，Cache地址也分为块号和块内地址。Cache的块内地址部分直接取自主存地址的块内地址段。主存块号和Cache块号不相同，Cache块号根据主存块号从块表中查找。Cache保存的各数据块互不相关，Cache必须对每个块和块自身的地址加以存储。当请求数据时，Cache控制器要把请求地址同所有的地址加以比较，进行确认。<br>特点：灵活，块冲突率低，只有在Cache中的块全部装满后才会出现冲突，Cache利用率高。但地址变换机构复杂，地址变换速度慢，成本高。<br>公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">主存地址位数 ＝ 块号 + 块内地址</div><div class="line">Cache地址位数＝块号 + 块内地址。</div></pre></td></tr></table></figure></p><p><strong>组相联映像</strong><br>j=(i mod Cache的组数)×Cache每组块数+k<br>组相连映像是前两种方式的折衷。主存按Cache容量分区，每个区分为若干组，每组包含若干块。Cache也进行同样的分组和分块。主存中一个组内的块数与Cache中一个组内的块数相等。组间采用直接方式，组内采用全相连方式。组的容量＝1时，即直接映像，组的容量＝整个Cache的容量时，即全相连映像。Cache的存在对于程序员透明，Cache的地址变换和数据块的替换算法都采用硬件实现。<br>公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">主存地址位数 ＝ 区号 + 组号 + 主存块号 + 块内地址</div><div class="line">Cache地址位数 ＝ 组号 + 组内块号 + 块内地址</div></pre></td></tr></table></figure></p><h1 id="替换策略（FIFO和LRU）"><a href="#替换策略（FIFO和LRU）" class="headerlink" title="替换策略（FIFO和LRU）"></a>替换策略（FIFO和LRU）</h1><p>略</p><h1 id="设置了Cache与未设置Cache时计算机运行速度的计算、内存平均存取时间的计算。"><a href="#设置了Cache与未设置Cache时计算机运行速度的计算、内存平均存取时间的计算。" class="headerlink" title="设置了Cache与未设置Cache时计算机运行速度的计算、内存平均存取时间的计算。"></a>设置了Cache与未设置Cache时计算机运行速度的计算、内存平均存取时间的计算。</h1><p>平均存取时间=h<em>tc+(1–h) </em>(tm)</p><h1 id="辅助存储器的性能参数的计算"><a href="#辅助存储器的性能参数的计算" class="headerlink" title="辅助存储器的性能参数的计算"></a>辅助存储器的性能参数的计算</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;三层体系结构的特点&quot;&gt;&lt;a href=&quot;#三层体系结构的特点&quot; class=&quot;headerlink&quot; title=&quot;三层体系结构的特点&quot;&gt;&lt;/a&gt;三层体系结构的特点&lt;/h1&gt;&lt;p&gt;三层体系结构依次是：Cache、主存、辅存。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cach
      
    
    </summary>
    
      <category term="计算机组成原理" scheme="http://sunlanchang.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="计算机组成原理" scheme="http://sunlanchang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>中央处理器</title>
    <link href="http://sunlanchang.github.io/2017/12/14/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <id>http://sunlanchang.github.io/2017/12/14/中央处理器/</id>
    <published>2017-12-14T12:18:28.000Z</published>
    <updated>2017-12-22T14:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p><strong>程序计数器PC</strong><br>即指令地址寄存器。用来存放当前正在执行的指令地址，或将要执行的下一条指令地址。<br><strong>指令寄存器IR</strong><br>用来存放当前正在执行的指令，以便在指令执行过程中控制完成一条指令的全部功能。<br><strong>指令译码器</strong><br>对指令寄存器IR中的操作码进行分析解释，产生相应的控制信号。<br><strong>MAR、MDR、标志寄存器</strong><br>地址寄存器，数据寄存器。标志寄存器包含CNVZ四个标志位。<br><strong>时钟周期、指令周期、机器周期</strong>  </p><ol><li>时钟周期：是计算机中最基本的、最小的时间单位。在一个时钟周期内,CPU仅完成一个最基本的动作。  </li><li>机器周期：在计算机中,为了便于管理,常把一条指令的执行过程划分为若干个阶段,每一阶段完成一项工作。例如,取指令、存储器读、存储器写等,这每一项工作称为一个基本操作。完成一个基本操作所需要的时间称为机器周期。  </li><li>指令周期：执行一条指令所需要的时间,一般由若干个机器周期组成。指令不同,所需的机器周期也不同。       对于一些简单的的单字节指令,在取指令周期中,指令取出到指令寄存器后,立即译码执行,不再需要其它的机器周期。对于一些比较复杂的指令,例如转移指令、乘法指令,则需要两个或者两个以上的机器周期。    通常含一个机器周期的指令称为单周期指令,包含两个机器周期的指令称为双周期指令。  </li></ol><p><strong>控制存储器</strong><br>为程序一般存放在专用的存储器中，该存储器主要存放控制命令（信号）和下一条执行的微指令地址（下址）。执行一条微指令就是执行一段存放在控制存储器中的微程序。</p><h1 id="控制器产生控制信号有两种方法：微程序控制、硬布线控制（组合逻辑控制）"><a href="#控制器产生控制信号有两种方法：微程序控制、硬布线控制（组合逻辑控制）" class="headerlink" title="控制器产生控制信号有两种方法：微程序控制、硬布线控制（组合逻辑控制）"></a>控制器产生控制信号有两种方法：微程序控制、硬布线控制（组合逻辑控制）</h1><p>略</p><h1 id="计算机取指和取操作数的过程及数据通路"><a href="#计算机取指和取操作数的过程及数据通路" class="headerlink" title="计算机取指和取操作数的过程及数据通路"></a>计算机取指和取操作数的过程及数据通路</h1><p>略</p><h1 id="用微程序设计方案设计微指令"><a href="#用微程序设计方案设计微指令" class="headerlink" title="用微程序设计方案设计微指令"></a>用微程序设计方案设计微指令</h1><p>微指令控制字段的方法：</p><ol><li>直接控制法</li><li>字段直接编译法</li><li>字段间接编译法<h1 id="指令流水的概念、影响流水线性能的因素及解决方法"><a href="#指令流水的概念、影响流水线性能的因素及解决方法" class="headerlink" title="指令流水的概念、影响流水线性能的因素及解决方法"></a>指令流水的概念、影响流水线性能的因素及解决方法</h1></li><li>为提高CPU利用率，加快执行速度，将指令分为若干个阶段，可并行执行不同指令的不同阶段，从而多个指令可以同时执行。在有效地控制了流水线阻塞的情况下，流水线可大大提高指令执行速度。经典的五级流水线：取址、译码/读寄存器、执行/计算有效地址、访问内存（读或写）、结果写回寄存器。</li><li>流水线阻塞的情况有三种：<br>　　1. 结构相关：指令重叠执行的过程中，硬件资源满足不了指令重叠执行的要求，发生资源冲突，这时将产生结构相关。解决的办法是增加硬件资源。<br>　　2. 数据相关：当一条指令需要前面某条指令的执行结果，而两者正在并行执行的情况下，将产生数据相关。解决方式：数据重定向，或称为旁路技术。<br>　　3. 控制相关：有跳转语句、分支指令，或其他改变IP值的指令，将产生控制相关。解决方法：分支预测技术，投机执行，延迟分支。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;程序计数器PC&lt;/strong&gt;&lt;br&gt;即指令地址寄存器。用来存放当前正在执行的指令地址，或将要执行的下一条
      
    
    </summary>
    
      <category term="计算机组成原理" scheme="http://sunlanchang.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="计算机组成原理" scheme="http://sunlanchang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
